// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProblemTags(t *testing.T) {
	t.Parallel()

	query := ProblemTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProblemTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProblemTags().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProblemTagExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProblemTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProblemTagExists to return true, but got false.")
	}
}

func testProblemTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	problemTagFound, err := FindProblemTag(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if problemTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProblemTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProblemTags().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testProblemTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProblemTags().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProblemTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	problemTagOne := &ProblemTag{}
	problemTagTwo := &ProblemTag{}
	if err = randomize.Struct(seed, problemTagOne, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagTwo, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemTagOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTags().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProblemTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	problemTagOne := &ProblemTag{}
	problemTagTwo := &ProblemTag{}
	if err = randomize.Struct(seed, problemTagOne, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagTwo, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemTagOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func problemTagBeforeInsertHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterInsertHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterSelectHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeUpdateHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterUpdateHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeDeleteHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterDeleteHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeUpsertHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterUpsertHook(e boil.Executor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func testProblemTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ProblemTag{}
	o := &ProblemTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, problemTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemTag object: %s", err)
	}

	AddProblemTagHook(boil.BeforeInsertHook, problemTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeInsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterInsertHook, problemTagAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	problemTagAfterInsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterSelectHook, problemTagAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	problemTagAfterSelectHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeUpdateHook, problemTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeUpdateHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterUpdateHook, problemTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagAfterUpdateHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeDeleteHook, problemTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeDeleteHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterDeleteHook, problemTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagAfterDeleteHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeUpsertHook, problemTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeUpsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterUpsertHook, problemTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagAfterUpsertHooks = []ProblemTagHook{}
}

func testProblemTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(problemTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagToOneProblemRelUsingProblem(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ProblemTag
	var foreign ProblemRel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProblemID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Problem().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProblemTagSlice{&local}
	if err = local.L.LoadProblem(tx, false, (*[]*ProblemTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Problem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Problem = nil
	if err = local.L.LoadProblem(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Problem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProblemTagToOneTagUsingTag(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ProblemTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProblemTagSlice{&local}
	if err = local.L.LoadTag(tx, false, (*[]*ProblemTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProblemTagToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ProblemTag
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProblemTagSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*ProblemTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProblemTagToOneSetOpProblemRelUsingProblem(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemTag
	var b, c ProblemRel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemTagDBTypes, false, strmangle.SetComplement(problemTagPrimaryKeyColumns, problemTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProblemRel{&b, &c} {
		err = a.SetProblem(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Problem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProblemProblemTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProblemID != x.ID {
			t.Error("foreign key was wrong value", a.ProblemID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProblemID))
		reflect.Indirect(reflect.ValueOf(&a.ProblemID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProblemID != x.ID {
			t.Error("foreign key was wrong value", a.ProblemID, x.ID)
		}
	}
}
func testProblemTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemTagDBTypes, false, strmangle.SetComplement(problemTagPrimaryKeyColumns, problemTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProblemTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}
func testProblemTagToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemTag
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemTagDBTypes, false, strmangle.SetComplement(problemTagPrimaryKeyColumns, problemTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProblemTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testProblemTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTags().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	problemTagDBTypes = map[string]string{`ID`: `integer`, `ProblemID`: `integer`, `TagID`: `integer`, `UserID`: `integer`, `Added`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testProblemTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProblemTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(problemTagAllColumns, problemTagPrimaryKeyColumns) {
		fields = problemTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			problemTagAllColumns,
			problemTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProblemTagSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProblemTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProblemTag{}
	if err = randomize.Struct(seed, &o, problemTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTag: %s", err)
	}

	count, err := ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, problemTagDBTypes, false, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTag: %s", err)
	}

	count, err = ProblemTags().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
