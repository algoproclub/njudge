// Code generated by mockery v2.28.1. DO NOT EDIT.

package problems

import (
	"github.com/mraron/njudge/pkg/language/sandbox"
	io "io"

	language "github.com/mraron/njudge/pkg/language"
	mock "github.com/stretchr/testify/mock"

	problems "github.com/mraron/njudge/pkg/problems"
)

// TaskType is an autogenerated mock type for the TaskType type
type TaskType struct {
	mock.Mock
}

type TaskType_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskType) EXPECT() *TaskType_Expecter {
	return &TaskType_Expecter{mock: &_m.Mock}
}

// Compile provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *TaskType) Compile(_a0 problems.Judgeable, _a1 sandbox.Sandbox, _a2 language.Language, _a3 io.Reader, _a4 io.Writer) (io.Reader, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(problems.Judgeable, sandbox.Sandbox, language.Language, io.Reader, io.Writer) (io.Reader, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(problems.Judgeable, sandbox.Sandbox, language.Language, io.Reader, io.Writer) io.Reader); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(problems.Judgeable, sandbox.Sandbox, language.Language, io.Reader, io.Writer) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskType_Compile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compile'
type TaskType_Compile_Call struct {
	*mock.Call
}

// Compile is a helper method to define mock.On call
//   - _a0 problems.Judgeable
//   - _a1 language.Sandbox
//   - _a2 language.Language
//   - _a3 io.Reader
//   - _a4 io.Writer
func (_e *TaskType_Expecter) Compile(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *TaskType_Compile_Call {
	return &TaskType_Compile_Call{Call: _e.mock.On("Compile", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *TaskType_Compile_Call) Run(run func(_a0 problems.Judgeable, _a1 sandbox.Sandbox, _a2 language.Language, _a3 io.Reader, _a4 io.Writer)) *TaskType_Compile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(problems.Judgeable), args[1].(sandbox.Sandbox), args[2].(language.Language), args[3].(io.Reader), args[4].(io.Writer))
	})
	return _c
}

func (_c *TaskType_Compile_Call) Return(_a0 io.Reader, _a1 error) *TaskType_Compile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskType_Compile_Call) RunAndReturn(run func(problems.Judgeable, sandbox.Sandbox, language.Language, io.Reader, io.Writer) (io.Reader, error)) *TaskType_Compile_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *TaskType) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskType_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type TaskType_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *TaskType_Expecter) Name() *TaskType_Name_Call {
	return &TaskType_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *TaskType_Name_Call) Run(run func()) *TaskType_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskType_Name_Call) Return(_a0 string) *TaskType_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskType_Name_Call) RunAndReturn(run func() string) *TaskType_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *TaskType) Run(_a0 problems.Judgeable, _a1 *sandbox.ChanProvider, _a2 language.Language, _a3 io.Reader, _a4 chan string, _a5 chan problems.Status) (problems.Status, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 problems.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(problems.Judgeable, *sandbox.ChanProvider, language.Language, io.Reader, chan string, chan problems.Status) (problems.Status, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5)
	}
	if rf, ok := ret.Get(0).(func(problems.Judgeable, *sandbox.ChanProvider, language.Language, io.Reader, chan string, chan problems.Status) problems.Status); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Get(0).(problems.Status)
	}

	if rf, ok := ret.Get(1).(func(problems.Judgeable, *sandbox.ChanProvider, language.Language, io.Reader, chan string, chan problems.Status) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskType_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type TaskType_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 problems.Judgeable
//   - _a1 *language.SandboxProvider
//   - _a2 language.Language
//   - _a3 io.Reader
//   - _a4 chan string
//   - _a5 chan problems.Status
func (_e *TaskType_Expecter) Run(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}) *TaskType_Run_Call {
	return &TaskType_Run_Call{Call: _e.mock.On("Run", _a0, _a1, _a2, _a3, _a4, _a5)}
}

func (_c *TaskType_Run_Call) Run(run func(_a0 problems.Judgeable, _a1 *sandbox.ChanProvider, _a2 language.Language, _a3 io.Reader, _a4 chan string, _a5 chan problems.Status)) *TaskType_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(problems.Judgeable), args[1].(*sandbox.ChanProvider), args[2].(language.Language), args[3].(io.Reader), args[4].(chan string), args[5].(chan problems.Status))
	})
	return _c
}

func (_c *TaskType_Run_Call) Return(_a0 problems.Status, _a1 error) *TaskType_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskType_Run_Call) RunAndReturn(run func(problems.Judgeable, *sandbox.ChanProvider, language.Language, io.Reader, chan string, chan problems.Status) (problems.Status, error)) *TaskType_Run_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTaskType interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskType creates a new instance of TaskType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskType(t mockConstructorTestingTNewTaskType) *TaskType {
	mock := &TaskType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
