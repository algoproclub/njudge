// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPartials(t *testing.T) {
	t.Parallel()

	query := Partials()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPartialsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Partials().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PartialSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartialsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PartialExists(tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if Partial exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PartialExists to return true, but got false.")
	}
}

func testPartialsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	partialFound, err := FindPartial(tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if partialFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPartialsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Partials().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPartialsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Partials().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPartialsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	partialOne := &Partial{}
	partialTwo := &Partial{}
	if err = randomize.Struct(seed, partialOne, partialDBTypes, false, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}
	if err = randomize.Struct(seed, partialTwo, partialDBTypes, false, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = partialOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = partialTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Partials().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPartialsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	partialOne := &Partial{}
	partialTwo := &Partial{}
	if err = randomize.Struct(seed, partialOne, partialDBTypes, false, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}
	if err = randomize.Struct(seed, partialTwo, partialDBTypes, false, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = partialOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = partialTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func partialBeforeInsertHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialAfterInsertHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialAfterSelectHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialBeforeUpdateHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialAfterUpdateHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialBeforeDeleteHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialAfterDeleteHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialBeforeUpsertHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func partialAfterUpsertHook(e boil.Executor, o *Partial) error {
	*o = Partial{}
	return nil
}

func testPartialsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Partial{}
	o := &Partial{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, partialDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Partial object: %s", err)
	}

	AddPartialHook(boil.BeforeInsertHook, partialBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	partialBeforeInsertHooks = []PartialHook{}

	AddPartialHook(boil.AfterInsertHook, partialAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	partialAfterInsertHooks = []PartialHook{}

	AddPartialHook(boil.AfterSelectHook, partialAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	partialAfterSelectHooks = []PartialHook{}

	AddPartialHook(boil.BeforeUpdateHook, partialBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	partialBeforeUpdateHooks = []PartialHook{}

	AddPartialHook(boil.AfterUpdateHook, partialAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	partialAfterUpdateHooks = []PartialHook{}

	AddPartialHook(boil.BeforeDeleteHook, partialBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	partialBeforeDeleteHooks = []PartialHook{}

	AddPartialHook(boil.AfterDeleteHook, partialAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	partialAfterDeleteHooks = []PartialHook{}

	AddPartialHook(boil.BeforeUpsertHook, partialBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	partialBeforeUpsertHooks = []PartialHook{}

	AddPartialHook(boil.AfterUpsertHook, partialAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	partialAfterUpsertHooks = []PartialHook{}
}

func testPartialsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartialsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(partialColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartialsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPartialsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PartialSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPartialsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Partials().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	partialDBTypes = map[string]string{`Name`: `text`, `HTML`: `text`}
	_              = bytes.MinRead
)

func testPartialsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(partialPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(partialAllColumns) == len(partialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, partialDBTypes, true, partialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPartialsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(partialAllColumns) == len(partialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Partial{}
	if err = randomize.Struct(seed, o, partialDBTypes, true, partialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, partialDBTypes, true, partialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(partialAllColumns, partialPrimaryKeyColumns) {
		fields = partialAllColumns
	} else {
		fields = strmangle.SetComplement(
			partialAllColumns,
			partialPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PartialSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPartialsUpsert(t *testing.T) {
	t.Parallel()

	if len(partialAllColumns) == len(partialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Partial{}
	if err = randomize.Struct(seed, &o, partialDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Partial: %s", err)
	}

	count, err := Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, partialDBTypes, false, partialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Partial struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Partial: %s", err)
	}

	count, err = Partials().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
