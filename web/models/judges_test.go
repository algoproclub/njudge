// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testJudges(t *testing.T) {
	t.Parallel()

	query := Judges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testJudgesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJudgesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Judges().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJudgesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := JudgeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJudgesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := JudgeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Judge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JudgeExists to return true, but got false.")
	}
}

func testJudgesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	judgeFound, err := FindJudge(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if judgeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testJudgesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Judges().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testJudgesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Judges().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJudgesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	judgeOne := &Judge{}
	judgeTwo := &Judge{}
	if err = randomize.Struct(seed, judgeOne, judgeDBTypes, false, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}
	if err = randomize.Struct(seed, judgeTwo, judgeDBTypes, false, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = judgeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = judgeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Judges().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJudgesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	judgeOne := &Judge{}
	judgeTwo := &Judge{}
	if err = randomize.Struct(seed, judgeOne, judgeDBTypes, false, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}
	if err = randomize.Struct(seed, judgeTwo, judgeDBTypes, false, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = judgeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = judgeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func judgeBeforeInsertHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeAfterInsertHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeAfterSelectHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeBeforeUpdateHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeAfterUpdateHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeBeforeDeleteHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeAfterDeleteHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeBeforeUpsertHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func judgeAfterUpsertHook(e boil.Executor, o *Judge) error {
	*o = Judge{}
	return nil
}

func testJudgesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Judge{}
	o := &Judge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, judgeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Judge object: %s", err)
	}

	AddJudgeHook(boil.BeforeInsertHook, judgeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	judgeBeforeInsertHooks = []JudgeHook{}

	AddJudgeHook(boil.AfterInsertHook, judgeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	judgeAfterInsertHooks = []JudgeHook{}

	AddJudgeHook(boil.AfterSelectHook, judgeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	judgeAfterSelectHooks = []JudgeHook{}

	AddJudgeHook(boil.BeforeUpdateHook, judgeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	judgeBeforeUpdateHooks = []JudgeHook{}

	AddJudgeHook(boil.AfterUpdateHook, judgeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	judgeAfterUpdateHooks = []JudgeHook{}

	AddJudgeHook(boil.BeforeDeleteHook, judgeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	judgeBeforeDeleteHooks = []JudgeHook{}

	AddJudgeHook(boil.AfterDeleteHook, judgeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	judgeAfterDeleteHooks = []JudgeHook{}

	AddJudgeHook(boil.BeforeUpsertHook, judgeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	judgeBeforeUpsertHooks = []JudgeHook{}

	AddJudgeHook(boil.AfterUpsertHook, judgeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	judgeAfterUpsertHooks = []JudgeHook{}
}

func testJudgesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJudgesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(judgeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJudgesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testJudgesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := JudgeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testJudgesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Judges().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	judgeDBTypes = map[string]string{`ID`: `integer`, `State`: `text`, `Host`: `text`, `Port`: `text`, `Ping`: `integer`, `Online`: `boolean`}
	_            = bytes.MinRead
)

func testJudgesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(judgePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(judgeAllColumns) == len(judgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testJudgesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(judgeAllColumns) == len(judgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Judge{}
	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, judgeDBTypes, true, judgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(judgeAllColumns, judgePrimaryKeyColumns) {
		fields = judgeAllColumns
	} else {
		fields = strmangle.SetComplement(
			judgeAllColumns,
			judgePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := JudgeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testJudgesUpsert(t *testing.T) {
	t.Parallel()

	if len(judgeAllColumns) == len(judgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Judge{}
	if err = randomize.Struct(seed, &o, judgeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Judge: %s", err)
	}

	count, err := Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, judgeDBTypes, false, judgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Judge struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Judge: %s", err)
	}

	count, err = Judges().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
