// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Judges", testJudges)
	t.Run("Partials", testPartials)
	t.Run("ProblemCategories", testProblemCategories)
	t.Run("ProblemRels", testProblemRels)
	t.Run("Submissions", testSubmissions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Judges", testJudgesDelete)
	t.Run("Partials", testPartialsDelete)
	t.Run("ProblemCategories", testProblemCategoriesDelete)
	t.Run("ProblemRels", testProblemRelsDelete)
	t.Run("Submissions", testSubmissionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Judges", testJudgesQueryDeleteAll)
	t.Run("Partials", testPartialsQueryDeleteAll)
	t.Run("ProblemCategories", testProblemCategoriesQueryDeleteAll)
	t.Run("ProblemRels", testProblemRelsQueryDeleteAll)
	t.Run("Submissions", testSubmissionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Judges", testJudgesSliceDeleteAll)
	t.Run("Partials", testPartialsSliceDeleteAll)
	t.Run("ProblemCategories", testProblemCategoriesSliceDeleteAll)
	t.Run("ProblemRels", testProblemRelsSliceDeleteAll)
	t.Run("Submissions", testSubmissionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Judges", testJudgesExists)
	t.Run("Partials", testPartialsExists)
	t.Run("ProblemCategories", testProblemCategoriesExists)
	t.Run("ProblemRels", testProblemRelsExists)
	t.Run("Submissions", testSubmissionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Judges", testJudgesFind)
	t.Run("Partials", testPartialsFind)
	t.Run("ProblemCategories", testProblemCategoriesFind)
	t.Run("ProblemRels", testProblemRelsFind)
	t.Run("Submissions", testSubmissionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Judges", testJudgesBind)
	t.Run("Partials", testPartialsBind)
	t.Run("ProblemCategories", testProblemCategoriesBind)
	t.Run("ProblemRels", testProblemRelsBind)
	t.Run("Submissions", testSubmissionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Judges", testJudgesOne)
	t.Run("Partials", testPartialsOne)
	t.Run("ProblemCategories", testProblemCategoriesOne)
	t.Run("ProblemRels", testProblemRelsOne)
	t.Run("Submissions", testSubmissionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Judges", testJudgesAll)
	t.Run("Partials", testPartialsAll)
	t.Run("ProblemCategories", testProblemCategoriesAll)
	t.Run("ProblemRels", testProblemRelsAll)
	t.Run("Submissions", testSubmissionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Judges", testJudgesCount)
	t.Run("Partials", testPartialsCount)
	t.Run("ProblemCategories", testProblemCategoriesCount)
	t.Run("ProblemRels", testProblemRelsCount)
	t.Run("Submissions", testSubmissionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Judges", testJudgesHooks)
	t.Run("Partials", testPartialsHooks)
	t.Run("ProblemCategories", testProblemCategoriesHooks)
	t.Run("ProblemRels", testProblemRelsHooks)
	t.Run("Submissions", testSubmissionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Judges", testJudgesInsert)
	t.Run("Judges", testJudgesInsertWhitelist)
	t.Run("Partials", testPartialsInsert)
	t.Run("Partials", testPartialsInsertWhitelist)
	t.Run("ProblemCategories", testProblemCategoriesInsert)
	t.Run("ProblemCategories", testProblemCategoriesInsertWhitelist)
	t.Run("ProblemRels", testProblemRelsInsert)
	t.Run("ProblemRels", testProblemRelsInsertWhitelist)
	t.Run("Submissions", testSubmissionsInsert)
	t.Run("Submissions", testSubmissionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ProblemCategoryToProblemCategoryUsingParent", testProblemCategoryToOneProblemCategoryUsingParent)
	t.Run("ProblemRelToProblemCategoryUsingCategory", testProblemRelToOneProblemCategoryUsingCategory)
	t.Run("SubmissionToUserUsingUser", testSubmissionToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ProblemCategoryToParentProblemCategories", testProblemCategoryToManyParentProblemCategories)
	t.Run("ProblemCategoryToCategoryProblemRels", testProblemCategoryToManyCategoryProblemRels)
	t.Run("UserToSubmissions", testUserToManySubmissions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ProblemCategoryToProblemCategoryUsingParentProblemCategories", testProblemCategoryToOneSetOpProblemCategoryUsingParent)
	t.Run("ProblemRelToProblemCategoryUsingCategoryProblemRels", testProblemRelToOneSetOpProblemCategoryUsingCategory)
	t.Run("SubmissionToUserUsingSubmissions", testSubmissionToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ProblemCategoryToProblemCategoryUsingParentProblemCategories", testProblemCategoryToOneRemoveOpProblemCategoryUsingParent)
	t.Run("ProblemRelToProblemCategoryUsingCategoryProblemRels", testProblemRelToOneRemoveOpProblemCategoryUsingCategory)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ProblemCategoryToParentProblemCategories", testProblemCategoryToManyAddOpParentProblemCategories)
	t.Run("ProblemCategoryToCategoryProblemRels", testProblemCategoryToManyAddOpCategoryProblemRels)
	t.Run("UserToSubmissions", testUserToManyAddOpSubmissions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ProblemCategoryToParentProblemCategories", testProblemCategoryToManySetOpParentProblemCategories)
	t.Run("ProblemCategoryToCategoryProblemRels", testProblemCategoryToManySetOpCategoryProblemRels)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ProblemCategoryToParentProblemCategories", testProblemCategoryToManyRemoveOpParentProblemCategories)
	t.Run("ProblemCategoryToCategoryProblemRels", testProblemCategoryToManyRemoveOpCategoryProblemRels)
}

func TestReload(t *testing.T) {
	t.Run("Judges", testJudgesReload)
	t.Run("Partials", testPartialsReload)
	t.Run("ProblemCategories", testProblemCategoriesReload)
	t.Run("ProblemRels", testProblemRelsReload)
	t.Run("Submissions", testSubmissionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Judges", testJudgesReloadAll)
	t.Run("Partials", testPartialsReloadAll)
	t.Run("ProblemCategories", testProblemCategoriesReloadAll)
	t.Run("ProblemRels", testProblemRelsReloadAll)
	t.Run("Submissions", testSubmissionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Judges", testJudgesSelect)
	t.Run("Partials", testPartialsSelect)
	t.Run("ProblemCategories", testProblemCategoriesSelect)
	t.Run("ProblemRels", testProblemRelsSelect)
	t.Run("Submissions", testSubmissionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Judges", testJudgesUpdate)
	t.Run("Partials", testPartialsUpdate)
	t.Run("ProblemCategories", testProblemCategoriesUpdate)
	t.Run("ProblemRels", testProblemRelsUpdate)
	t.Run("Submissions", testSubmissionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Judges", testJudgesSliceUpdateAll)
	t.Run("Partials", testPartialsSliceUpdateAll)
	t.Run("ProblemCategories", testProblemCategoriesSliceUpdateAll)
	t.Run("ProblemRels", testProblemRelsSliceUpdateAll)
	t.Run("Submissions", testSubmissionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
