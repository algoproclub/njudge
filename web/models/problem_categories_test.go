// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProblemCategories(t *testing.T) {
	t.Parallel()

	query := ProblemCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProblemCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProblemCategories().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProblemCategoryExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProblemCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProblemCategoryExists to return true, but got false.")
	}
}

func testProblemCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	problemCategoryFound, err := FindProblemCategory(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if problemCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProblemCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProblemCategories().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testProblemCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProblemCategories().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProblemCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	problemCategoryOne := &ProblemCategory{}
	problemCategoryTwo := &ProblemCategory{}
	if err = randomize.Struct(seed, problemCategoryOne, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, problemCategoryTwo, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemCategoryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemCategoryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemCategories().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProblemCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	problemCategoryOne := &ProblemCategory{}
	problemCategoryTwo := &ProblemCategory{}
	if err = randomize.Struct(seed, problemCategoryOne, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, problemCategoryTwo, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemCategoryOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemCategoryTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func problemCategoryBeforeInsertHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryAfterInsertHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryAfterSelectHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryBeforeUpdateHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryAfterUpdateHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryBeforeDeleteHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryAfterDeleteHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryBeforeUpsertHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func problemCategoryAfterUpsertHook(e boil.Executor, o *ProblemCategory) error {
	*o = ProblemCategory{}
	return nil
}

func testProblemCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ProblemCategory{}
	o := &ProblemCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemCategory object: %s", err)
	}

	AddProblemCategoryHook(boil.BeforeInsertHook, problemCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	problemCategoryBeforeInsertHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.AfterInsertHook, problemCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	problemCategoryAfterInsertHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.AfterSelectHook, problemCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	problemCategoryAfterSelectHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.BeforeUpdateHook, problemCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	problemCategoryBeforeUpdateHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.AfterUpdateHook, problemCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	problemCategoryAfterUpdateHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.BeforeDeleteHook, problemCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	problemCategoryBeforeDeleteHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.AfterDeleteHook, problemCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	problemCategoryAfterDeleteHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.BeforeUpsertHook, problemCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	problemCategoryBeforeUpsertHooks = []ProblemCategoryHook{}

	AddProblemCategoryHook(boil.AfterUpsertHook, problemCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	problemCategoryAfterUpsertHooks = []ProblemCategoryHook{}
}

func testProblemCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(problemCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemCategoryToManyParentProblemCategories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentID, a.ID)
	queries.Assign(&c.ParentID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentProblemCategories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ParentID, b.ParentID) {
			bFound = true
		}
		if queries.Equal(v.ParentID, c.ParentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProblemCategorySlice{&a}
	if err = a.L.LoadParentProblemCategories(tx, false, (*[]*ProblemCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentProblemCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentProblemCategories = nil
	if err = a.L.LoadParentProblemCategories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentProblemCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProblemCategoryToManyCategoryProblemRels(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c ProblemRel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CategoryID, a.ID)
	queries.Assign(&c.CategoryID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryProblemRels().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CategoryID, b.CategoryID) {
			bFound = true
		}
		if queries.Equal(v.CategoryID, c.CategoryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProblemCategorySlice{&a}
	if err = a.L.LoadCategoryProblemRels(tx, false, (*[]*ProblemCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryProblemRels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryProblemRels = nil
	if err = a.L.LoadCategoryProblemRels(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryProblemRels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProblemCategoryToManyAddOpParentProblemCategories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProblemCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentProblemCategories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ParentID) {
			t.Error("foreign key was wrong value", a.ID, first.ParentID)
		}
		if !queries.Equal(a.ID, second.ParentID) {
			t.Error("foreign key was wrong value", a.ID, second.ParentID)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentProblemCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentProblemCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentProblemCategories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProblemCategoryToManySetOpParentProblemCategories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentProblemCategories(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentProblemCategories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentProblemCategories(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentProblemCategories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ParentID) {
		t.Error("foreign key was wrong value", a.ID, d.ParentID)
	}
	if !queries.Equal(a.ID, e.ParentID) {
		t.Error("foreign key was wrong value", a.ID, e.ParentID)
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentProblemCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentProblemCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProblemCategoryToManyRemoveOpParentProblemCategories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentProblemCategories(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentProblemCategories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentProblemCategories(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentProblemCategories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentProblemCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentProblemCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentProblemCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProblemCategoryToManyAddOpCategoryProblemRels(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemRel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemRel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProblemRel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryProblemRels(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CategoryID) {
			t.Error("foreign key was wrong value", a.ID, first.CategoryID)
		}
		if !queries.Equal(a.ID, second.CategoryID) {
			t.Error("foreign key was wrong value", a.ID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryProblemRels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryProblemRels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryProblemRels().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProblemCategoryToManySetOpCategoryProblemRels(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemRel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemRel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCategoryProblemRels(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryProblemRels().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCategoryProblemRels(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryProblemRels().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CategoryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CategoryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CategoryID) {
		t.Error("foreign key was wrong value", a.ID, d.CategoryID)
	}
	if !queries.Equal(a.ID, e.CategoryID) {
		t.Error("foreign key was wrong value", a.ID, e.CategoryID)
	}

	if b.R.Category != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Category != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Category != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Category != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CategoryProblemRels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CategoryProblemRels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProblemCategoryToManyRemoveOpCategoryProblemRels(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c, d, e ProblemRel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProblemRel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCategoryProblemRels(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryProblemRels().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCategoryProblemRels(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryProblemRels().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CategoryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CategoryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Category != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Category != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Category != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Category != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CategoryProblemRels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CategoryProblemRels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CategoryProblemRels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProblemCategoryToOneProblemCategoryUsingParent(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ProblemCategory
	var foreign ProblemCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProblemCategorySlice{&local}
	if err = local.L.LoadParent(tx, false, (*[]*ProblemCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProblemCategoryToOneSetOpProblemCategoryUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b, c ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProblemCategory{&b, &c} {
		err = a.SetParent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentProblemCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentID))
		reflect.Indirect(reflect.ValueOf(&a.ParentID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID, x.ID)
		}
	}
}

func testProblemCategoryToOneRemoveOpProblemCategoryUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemCategory
	var b ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Parent().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Parent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentProblemCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProblemCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testProblemCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemCategorySlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testProblemCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemCategories().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	problemCategoryDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `ParentID`: `integer`}
	_                      = bytes.MinRead
)

func testProblemCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(problemCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(problemCategoryAllColumns) == len(problemCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProblemCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(problemCategoryAllColumns) == len(problemCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemCategory{}
	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemCategoryDBTypes, true, problemCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(problemCategoryAllColumns, problemCategoryPrimaryKeyColumns) {
		fields = problemCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			problemCategoryAllColumns,
			problemCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProblemCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProblemCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(problemCategoryAllColumns) == len(problemCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProblemCategory{}
	if err = randomize.Struct(seed, &o, problemCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemCategory: %s", err)
	}

	count, err := ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, problemCategoryDBTypes, false, problemCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemCategory: %s", err)
	}

	count, err = ProblemCategories().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
