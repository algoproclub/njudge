// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProblemRels(t *testing.T) {
	t.Parallel()

	query := ProblemRels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProblemRelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemRelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProblemRels().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemRelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemRelSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemRelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProblemRelExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProblemRel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProblemRelExists to return true, but got false.")
	}
}

func testProblemRelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	problemRelFound, err := FindProblemRel(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if problemRelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProblemRelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProblemRels().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testProblemRelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProblemRels().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProblemRelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	problemRelOne := &ProblemRel{}
	problemRelTwo := &ProblemRel{}
	if err = randomize.Struct(seed, problemRelOne, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}
	if err = randomize.Struct(seed, problemRelTwo, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemRelOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemRelTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemRels().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProblemRelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	problemRelOne := &ProblemRel{}
	problemRelTwo := &ProblemRel{}
	if err = randomize.Struct(seed, problemRelOne, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}
	if err = randomize.Struct(seed, problemRelTwo, problemRelDBTypes, false, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = problemRelOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemRelTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func problemRelBeforeInsertHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelAfterInsertHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelAfterSelectHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelBeforeUpdateHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelAfterUpdateHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelBeforeDeleteHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelAfterDeleteHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelBeforeUpsertHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func problemRelAfterUpsertHook(e boil.Executor, o *ProblemRel) error {
	*o = ProblemRel{}
	return nil
}

func testProblemRelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ProblemRel{}
	o := &ProblemRel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, problemRelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemRel object: %s", err)
	}

	AddProblemRelHook(boil.BeforeInsertHook, problemRelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	problemRelBeforeInsertHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.AfterInsertHook, problemRelAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	problemRelAfterInsertHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.AfterSelectHook, problemRelAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	problemRelAfterSelectHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.BeforeUpdateHook, problemRelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	problemRelBeforeUpdateHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.AfterUpdateHook, problemRelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	problemRelAfterUpdateHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.BeforeDeleteHook, problemRelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	problemRelBeforeDeleteHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.AfterDeleteHook, problemRelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	problemRelAfterDeleteHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.BeforeUpsertHook, problemRelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	problemRelBeforeUpsertHooks = []ProblemRelHook{}

	AddProblemRelHook(boil.AfterUpsertHook, problemRelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	problemRelAfterUpsertHooks = []ProblemRelHook{}
}

func testProblemRelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemRelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(problemRelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemRelToOneProblemCategoryUsingCategory(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ProblemRel
	var foreign ProblemCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, problemCategoryDBTypes, false, problemCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemCategory struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProblemRelSlice{&local}
	if err = local.L.LoadCategory(tx, false, (*[]*ProblemRel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProblemRelToOneSetOpProblemCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemRel
	var b, c ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProblemCategory{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryProblemRels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}

func testProblemRelToOneRemoveOpProblemCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ProblemRel
	var b ProblemCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, problemRelDBTypes, false, strmangle.SetComplement(problemRelPrimaryKeyColumns, problemRelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, problemCategoryDBTypes, false, strmangle.SetComplement(problemCategoryPrimaryKeyColumns, problemCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CategoryProblemRels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProblemRelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testProblemRelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemRelSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testProblemRelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemRels().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	problemRelDBTypes = map[string]string{`Problemset`: `text`, `Problem`: `text`, `ID`: `integer`, `CategoryID`: `integer`, `SolverCount`: `integer`}
	_                 = bytes.MinRead
)

func testProblemRelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(problemRelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(problemRelAllColumns) == len(problemRelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProblemRelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(problemRelAllColumns) == len(problemRelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemRel{}
	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemRelDBTypes, true, problemRelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(problemRelAllColumns, problemRelPrimaryKeyColumns) {
		fields = problemRelAllColumns
	} else {
		fields = strmangle.SetComplement(
			problemRelAllColumns,
			problemRelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProblemRelSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProblemRelsUpsert(t *testing.T) {
	t.Parallel()

	if len(problemRelAllColumns) == len(problemRelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProblemRel{}
	if err = randomize.Struct(seed, &o, problemRelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemRel: %s", err)
	}

	count, err := ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, problemRelDBTypes, false, problemRelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemRel struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemRel: %s", err)
	}

	count, err = ProblemRels().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
