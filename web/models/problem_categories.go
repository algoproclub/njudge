// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProblemCategory is an object representing the database table.
type ProblemCategory struct {
	ID       int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	ParentID null.Int `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`

	R *problemCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L problemCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProblemCategoryColumns = struct {
	ID       string
	Name     string
	ParentID string
}{
	ID:       "id",
	Name:     "name",
	ParentID: "parent_id",
}

var ProblemCategoryTableColumns = struct {
	ID       string
	Name     string
	ParentID string
}{
	ID:       "problem_categories.id",
	Name:     "problem_categories.name",
	ParentID: "problem_categories.parent_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProblemCategoryWhere = struct {
	ID       whereHelperint
	Name     whereHelperstring
	ParentID whereHelpernull_Int
}{
	ID:       whereHelperint{field: "\"problem_categories\".\"id\""},
	Name:     whereHelperstring{field: "\"problem_categories\".\"name\""},
	ParentID: whereHelpernull_Int{field: "\"problem_categories\".\"parent_id\""},
}

// ProblemCategoryRels is where relationship names are stored.
var ProblemCategoryRels = struct {
	Parent                  string
	ParentProblemCategories string
	CategoryProblemRels     string
}{
	Parent:                  "Parent",
	ParentProblemCategories: "ParentProblemCategories",
	CategoryProblemRels:     "CategoryProblemRels",
}

// problemCategoryR is where relationships are stored.
type problemCategoryR struct {
	Parent                  *ProblemCategory     `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	ParentProblemCategories ProblemCategorySlice `boil:"ParentProblemCategories" json:"ParentProblemCategories" toml:"ParentProblemCategories" yaml:"ParentProblemCategories"`
	CategoryProblemRels     ProblemRelSlice      `boil:"CategoryProblemRels" json:"CategoryProblemRels" toml:"CategoryProblemRels" yaml:"CategoryProblemRels"`
}

// NewStruct creates a new relationship struct
func (*problemCategoryR) NewStruct() *problemCategoryR {
	return &problemCategoryR{}
}

func (r *problemCategoryR) GetParent() *ProblemCategory {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *problemCategoryR) GetParentProblemCategories() ProblemCategorySlice {
	if r == nil {
		return nil
	}
	return r.ParentProblemCategories
}

func (r *problemCategoryR) GetCategoryProblemRels() ProblemRelSlice {
	if r == nil {
		return nil
	}
	return r.CategoryProblemRels
}

// problemCategoryL is where Load methods for each relationship are stored.
type problemCategoryL struct{}

var (
	problemCategoryAllColumns            = []string{"id", "name", "parent_id"}
	problemCategoryColumnsWithoutDefault = []string{"name"}
	problemCategoryColumnsWithDefault    = []string{"id", "parent_id"}
	problemCategoryPrimaryKeyColumns     = []string{"id"}
	problemCategoryGeneratedColumns      = []string{}
)

type (
	// ProblemCategorySlice is an alias for a slice of pointers to ProblemCategory.
	// This should almost always be used instead of []ProblemCategory.
	ProblemCategorySlice []*ProblemCategory
	// ProblemCategoryHook is the signature for custom ProblemCategory hook methods
	ProblemCategoryHook func(boil.Executor, *ProblemCategory) error

	problemCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	problemCategoryType                 = reflect.TypeOf(&ProblemCategory{})
	problemCategoryMapping              = queries.MakeStructMapping(problemCategoryType)
	problemCategoryPrimaryKeyMapping, _ = queries.BindMapping(problemCategoryType, problemCategoryMapping, problemCategoryPrimaryKeyColumns)
	problemCategoryInsertCacheMut       sync.RWMutex
	problemCategoryInsertCache          = make(map[string]insertCache)
	problemCategoryUpdateCacheMut       sync.RWMutex
	problemCategoryUpdateCache          = make(map[string]updateCache)
	problemCategoryUpsertCacheMut       sync.RWMutex
	problemCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var problemCategoryAfterSelectHooks []ProblemCategoryHook

var problemCategoryBeforeInsertHooks []ProblemCategoryHook
var problemCategoryAfterInsertHooks []ProblemCategoryHook

var problemCategoryBeforeUpdateHooks []ProblemCategoryHook
var problemCategoryAfterUpdateHooks []ProblemCategoryHook

var problemCategoryBeforeDeleteHooks []ProblemCategoryHook
var problemCategoryAfterDeleteHooks []ProblemCategoryHook

var problemCategoryBeforeUpsertHooks []ProblemCategoryHook
var problemCategoryAfterUpsertHooks []ProblemCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProblemCategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProblemCategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProblemCategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProblemCategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProblemCategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProblemCategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProblemCategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProblemCategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProblemCategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range problemCategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProblemCategoryHook registers your hook function for all future operations.
func AddProblemCategoryHook(hookPoint boil.HookPoint, problemCategoryHook ProblemCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		problemCategoryAfterSelectHooks = append(problemCategoryAfterSelectHooks, problemCategoryHook)
	case boil.BeforeInsertHook:
		problemCategoryBeforeInsertHooks = append(problemCategoryBeforeInsertHooks, problemCategoryHook)
	case boil.AfterInsertHook:
		problemCategoryAfterInsertHooks = append(problemCategoryAfterInsertHooks, problemCategoryHook)
	case boil.BeforeUpdateHook:
		problemCategoryBeforeUpdateHooks = append(problemCategoryBeforeUpdateHooks, problemCategoryHook)
	case boil.AfterUpdateHook:
		problemCategoryAfterUpdateHooks = append(problemCategoryAfterUpdateHooks, problemCategoryHook)
	case boil.BeforeDeleteHook:
		problemCategoryBeforeDeleteHooks = append(problemCategoryBeforeDeleteHooks, problemCategoryHook)
	case boil.AfterDeleteHook:
		problemCategoryAfterDeleteHooks = append(problemCategoryAfterDeleteHooks, problemCategoryHook)
	case boil.BeforeUpsertHook:
		problemCategoryBeforeUpsertHooks = append(problemCategoryBeforeUpsertHooks, problemCategoryHook)
	case boil.AfterUpsertHook:
		problemCategoryAfterUpsertHooks = append(problemCategoryAfterUpsertHooks, problemCategoryHook)
	}
}

// OneG returns a single problemCategory record from the query using the global executor.
func (q problemCategoryQuery) OneG() (*ProblemCategory, error) {
	return q.One(boil.GetDB())
}

// One returns a single problemCategory record from the query.
func (q problemCategoryQuery) One(exec boil.Executor) (*ProblemCategory, error) {
	o := &ProblemCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for problem_categories")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProblemCategory records from the query using the global executor.
func (q problemCategoryQuery) AllG() (ProblemCategorySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ProblemCategory records from the query.
func (q problemCategoryQuery) All(exec boil.Executor) (ProblemCategorySlice, error) {
	var o []*ProblemCategory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProblemCategory slice")
	}

	if len(problemCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProblemCategory records in the query using the global executor
func (q problemCategoryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ProblemCategory records in the query.
func (q problemCategoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count problem_categories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q problemCategoryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q problemCategoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if problem_categories exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *ProblemCategory) Parent(mods ...qm.QueryMod) problemCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return ProblemCategories(queryMods...)
}

// ParentProblemCategories retrieves all the problem_category's ProblemCategories with an executor via parent_id column.
func (o *ProblemCategory) ParentProblemCategories(mods ...qm.QueryMod) problemCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"problem_categories\".\"parent_id\"=?", o.ID),
	)

	return ProblemCategories(queryMods...)
}

// CategoryProblemRels retrieves all the problem_rel's ProblemRels with an executor via category_id column.
func (o *ProblemCategory) CategoryProblemRels(mods ...qm.QueryMod) problemRelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"problem_rels\".\"category_id\"=?", o.ID),
	)

	return ProblemRels(queryMods...)
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (problemCategoryL) LoadParent(e boil.Executor, singular bool, maybeProblemCategory interface{}, mods queries.Applicator) error {
	var slice []*ProblemCategory
	var object *ProblemCategory

	if singular {
		var ok bool
		object, ok = maybeProblemCategory.(*ProblemCategory)
		if !ok {
			object = new(ProblemCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemCategory))
			}
		}
	} else {
		s, ok := maybeProblemCategory.(*[]*ProblemCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &problemCategoryR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`problem_categories`),
		qm.WhereIn(`problem_categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProblemCategory")
	}

	var resultSlice []*ProblemCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProblemCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for problem_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for problem_categories")
	}

	if len(problemCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &problemCategoryR{}
		}
		foreign.R.ParentProblemCategories = append(foreign.R.ParentProblemCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &problemCategoryR{}
				}
				foreign.R.ParentProblemCategories = append(foreign.R.ParentProblemCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadParentProblemCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (problemCategoryL) LoadParentProblemCategories(e boil.Executor, singular bool, maybeProblemCategory interface{}, mods queries.Applicator) error {
	var slice []*ProblemCategory
	var object *ProblemCategory

	if singular {
		var ok bool
		object, ok = maybeProblemCategory.(*ProblemCategory)
		if !ok {
			object = new(ProblemCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemCategory))
			}
		}
	} else {
		s, ok := maybeProblemCategory.(*[]*ProblemCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &problemCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`problem_categories`),
		qm.WhereIn(`problem_categories.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load problem_categories")
	}

	var resultSlice []*ProblemCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice problem_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on problem_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for problem_categories")
	}

	if len(problemCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentProblemCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &problemCategoryR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentProblemCategories = append(local.R.ParentProblemCategories, foreign)
				if foreign.R == nil {
					foreign.R = &problemCategoryR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryProblemRels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (problemCategoryL) LoadCategoryProblemRels(e boil.Executor, singular bool, maybeProblemCategory interface{}, mods queries.Applicator) error {
	var slice []*ProblemCategory
	var object *ProblemCategory

	if singular {
		var ok bool
		object, ok = maybeProblemCategory.(*ProblemCategory)
		if !ok {
			object = new(ProblemCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemCategory))
			}
		}
	} else {
		s, ok := maybeProblemCategory.(*[]*ProblemCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &problemCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`problem_rels`),
		qm.WhereIn(`problem_rels.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load problem_rels")
	}

	var resultSlice []*ProblemRel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice problem_rels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on problem_rels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for problem_rels")
	}

	if len(problemRelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryProblemRels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &problemRelR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.CategoryProblemRels = append(local.R.CategoryProblemRels, foreign)
				if foreign.R == nil {
					foreign.R = &problemRelR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// SetParentG of the problemCategory to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentProblemCategories.
// Uses the global database handle.
func (o *ProblemCategory) SetParentG(insert bool, related *ProblemCategory) error {
	return o.SetParent(boil.GetDB(), insert, related)
}

// SetParent of the problemCategory to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentProblemCategories.
func (o *ProblemCategory) SetParent(exec boil.Executor, insert bool, related *ProblemCategory) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"problem_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, problemCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &problemCategoryR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &problemCategoryR{
			ParentProblemCategories: ProblemCategorySlice{o},
		}
	} else {
		related.R.ParentProblemCategories = append(related.R.ParentProblemCategories, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ProblemCategory) RemoveParentG(related *ProblemCategory) error {
	return o.RemoveParent(boil.GetDB(), related)
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProblemCategory) RemoveParent(exec boil.Executor, related *ProblemCategory) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentProblemCategories {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentProblemCategories)
		if ln > 1 && i < ln-1 {
			related.R.ParentProblemCategories[i] = related.R.ParentProblemCategories[ln-1]
		}
		related.R.ParentProblemCategories = related.R.ParentProblemCategories[:ln-1]
		break
	}
	return nil
}

// AddParentProblemCategoriesG adds the given related objects to the existing relationships
// of the problem_category, optionally inserting them as new records.
// Appends related to o.R.ParentProblemCategories.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *ProblemCategory) AddParentProblemCategoriesG(insert bool, related ...*ProblemCategory) error {
	return o.AddParentProblemCategories(boil.GetDB(), insert, related...)
}

// AddParentProblemCategories adds the given related objects to the existing relationships
// of the problem_category, optionally inserting them as new records.
// Appends related to o.R.ParentProblemCategories.
// Sets related.R.Parent appropriately.
func (o *ProblemCategory) AddParentProblemCategories(exec boil.Executor, insert bool, related ...*ProblemCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"problem_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, problemCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &problemCategoryR{
			ParentProblemCategories: related,
		}
	} else {
		o.R.ParentProblemCategories = append(o.R.ParentProblemCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &problemCategoryR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentProblemCategoriesG removes all previously related items of the
// problem_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentProblemCategories accordingly.
// Replaces o.R.ParentProblemCategories with related.
// Sets related.R.Parent's ParentProblemCategories accordingly.
// Uses the global database handle.
func (o *ProblemCategory) SetParentProblemCategoriesG(insert bool, related ...*ProblemCategory) error {
	return o.SetParentProblemCategories(boil.GetDB(), insert, related...)
}

// SetParentProblemCategories removes all previously related items of the
// problem_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentProblemCategories accordingly.
// Replaces o.R.ParentProblemCategories with related.
// Sets related.R.Parent's ParentProblemCategories accordingly.
func (o *ProblemCategory) SetParentProblemCategories(exec boil.Executor, insert bool, related ...*ProblemCategory) error {
	query := "update \"problem_categories\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentProblemCategories {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}
		o.R.ParentProblemCategories = nil
	}

	return o.AddParentProblemCategories(exec, insert, related...)
}

// RemoveParentProblemCategoriesG relationships from objects passed in.
// Removes related items from R.ParentProblemCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *ProblemCategory) RemoveParentProblemCategoriesG(related ...*ProblemCategory) error {
	return o.RemoveParentProblemCategories(boil.GetDB(), related...)
}

// RemoveParentProblemCategories relationships from objects passed in.
// Removes related items from R.ParentProblemCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *ProblemCategory) RemoveParentProblemCategories(exec boil.Executor, related ...*ProblemCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentProblemCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentProblemCategories)
			if ln > 1 && i < ln-1 {
				o.R.ParentProblemCategories[i] = o.R.ParentProblemCategories[ln-1]
			}
			o.R.ParentProblemCategories = o.R.ParentProblemCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryProblemRelsG adds the given related objects to the existing relationships
// of the problem_category, optionally inserting them as new records.
// Appends related to o.R.CategoryProblemRels.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *ProblemCategory) AddCategoryProblemRelsG(insert bool, related ...*ProblemRel) error {
	return o.AddCategoryProblemRels(boil.GetDB(), insert, related...)
}

// AddCategoryProblemRels adds the given related objects to the existing relationships
// of the problem_category, optionally inserting them as new records.
// Appends related to o.R.CategoryProblemRels.
// Sets related.R.Category appropriately.
func (o *ProblemCategory) AddCategoryProblemRels(exec boil.Executor, insert bool, related ...*ProblemRel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"problem_rels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, problemRelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &problemCategoryR{
			CategoryProblemRels: related,
		}
	} else {
		o.R.CategoryProblemRels = append(o.R.CategoryProblemRels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &problemRelR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetCategoryProblemRelsG removes all previously related items of the
// problem_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's CategoryProblemRels accordingly.
// Replaces o.R.CategoryProblemRels with related.
// Sets related.R.Category's CategoryProblemRels accordingly.
// Uses the global database handle.
func (o *ProblemCategory) SetCategoryProblemRelsG(insert bool, related ...*ProblemRel) error {
	return o.SetCategoryProblemRels(boil.GetDB(), insert, related...)
}

// SetCategoryProblemRels removes all previously related items of the
// problem_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's CategoryProblemRels accordingly.
// Replaces o.R.CategoryProblemRels with related.
// Sets related.R.Category's CategoryProblemRels accordingly.
func (o *ProblemCategory) SetCategoryProblemRels(exec boil.Executor, insert bool, related ...*ProblemRel) error {
	query := "update \"problem_rels\" set \"category_id\" = null where \"category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryProblemRels {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.CategoryProblemRels = nil
	}

	return o.AddCategoryProblemRels(exec, insert, related...)
}

// RemoveCategoryProblemRelsG relationships from objects passed in.
// Removes related items from R.CategoryProblemRels (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
// Uses the global database handle.
func (o *ProblemCategory) RemoveCategoryProblemRelsG(related ...*ProblemRel) error {
	return o.RemoveCategoryProblemRels(boil.GetDB(), related...)
}

// RemoveCategoryProblemRels relationships from objects passed in.
// Removes related items from R.CategoryProblemRels (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *ProblemCategory) RemoveCategoryProblemRels(exec boil.Executor, related ...*ProblemRel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryProblemRels {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryProblemRels)
			if ln > 1 && i < ln-1 {
				o.R.CategoryProblemRels[i] = o.R.CategoryProblemRels[ln-1]
			}
			o.R.CategoryProblemRels = o.R.CategoryProblemRels[:ln-1]
			break
		}
	}

	return nil
}

// ProblemCategories retrieves all the records using an executor.
func ProblemCategories(mods ...qm.QueryMod) problemCategoryQuery {
	mods = append(mods, qm.From("\"problem_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"problem_categories\".*"})
	}

	return problemCategoryQuery{q}
}

// FindProblemCategoryG retrieves a single record by ID.
func FindProblemCategoryG(iD int, selectCols ...string) (*ProblemCategory, error) {
	return FindProblemCategory(boil.GetDB(), iD, selectCols...)
}

// FindProblemCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProblemCategory(exec boil.Executor, iD int, selectCols ...string) (*ProblemCategory, error) {
	problemCategoryObj := &ProblemCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"problem_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, problemCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from problem_categories")
	}

	if err = problemCategoryObj.doAfterSelectHooks(exec); err != nil {
		return problemCategoryObj, err
	}

	return problemCategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProblemCategory) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProblemCategory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no problem_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(problemCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	problemCategoryInsertCacheMut.RLock()
	cache, cached := problemCategoryInsertCache[key]
	problemCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			problemCategoryAllColumns,
			problemCategoryColumnsWithDefault,
			problemCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(problemCategoryType, problemCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(problemCategoryType, problemCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"problem_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"problem_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into problem_categories")
	}

	if !cached {
		problemCategoryInsertCacheMut.Lock()
		problemCategoryInsertCache[key] = cache
		problemCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ProblemCategory record using the global executor.
// See Update for more documentation.
func (o *ProblemCategory) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ProblemCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProblemCategory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	problemCategoryUpdateCacheMut.RLock()
	cache, cached := problemCategoryUpdateCache[key]
	problemCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			problemCategoryAllColumns,
			problemCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update problem_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"problem_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, problemCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(problemCategoryType, problemCategoryMapping, append(wl, problemCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update problem_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for problem_categories")
	}

	if !cached {
		problemCategoryUpdateCacheMut.Lock()
		problemCategoryUpdateCache[key] = cache
		problemCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q problemCategoryQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q problemCategoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for problem_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for problem_categories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProblemCategorySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProblemCategorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"problem_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, problemCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in problemCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all problemCategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProblemCategory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProblemCategory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no problem_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(problemCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	problemCategoryUpsertCacheMut.RLock()
	cache, cached := problemCategoryUpsertCache[key]
	problemCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			problemCategoryAllColumns,
			problemCategoryColumnsWithDefault,
			problemCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			problemCategoryAllColumns,
			problemCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert problem_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(problemCategoryPrimaryKeyColumns))
			copy(conflict, problemCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"problem_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(problemCategoryType, problemCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(problemCategoryType, problemCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert problem_categories")
	}

	if !cached {
		problemCategoryUpsertCacheMut.Lock()
		problemCategoryUpsertCache[key] = cache
		problemCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ProblemCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProblemCategory) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ProblemCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProblemCategory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProblemCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), problemCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"problem_categories\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from problem_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for problem_categories")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q problemCategoryQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q problemCategoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no problemCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from problem_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for problem_categories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProblemCategorySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProblemCategorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(problemCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"problem_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, problemCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from problemCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for problem_categories")
	}

	if len(problemCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProblemCategory) ReloadG() error {
	if o == nil {
		return errors.New("models: no ProblemCategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProblemCategory) Reload(exec boil.Executor) error {
	ret, err := FindProblemCategory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProblemCategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ProblemCategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProblemCategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProblemCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"problem_categories\".* FROM \"problem_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, problemCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProblemCategorySlice")
	}

	*o = slice

	return nil
}

// ProblemCategoryExistsG checks if the ProblemCategory row exists.
func ProblemCategoryExistsG(iD int) (bool, error) {
	return ProblemCategoryExists(boil.GetDB(), iD)
}

// ProblemCategoryExists checks if the ProblemCategory row exists.
func ProblemCategoryExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"problem_categories\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if problem_categories exists")
	}

	return exists, nil
}
