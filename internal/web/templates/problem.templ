package templates

import "github.com/mraron/njudge/pkg/language/memory"
import "github.com/mraron/njudge/pkg/language"
import "github.com/mraron/njudge/internal/njudge"
import "time"
import "github.com/mraron/njudge/pkg/problems"

templ localeEmoji(locale string) {
    switch locale {
        case "hungarian":
            üá≠üá∫
        case "english":
            üá∫üá∏
        case "russian":
            üá∑üá∫
        default:
            üó∫Ô∏è
    }
}

templ problemMenu(curr string, statements problems.Contents) {
    <ul class="nav nav-tabs">
        if curr != "problem" || len(statements)==0 {
            <li class="nav-item">
                <a class={"nav-link"+iif(curr=="problem", " active", "")} href="./problem">
                    {Tr(ctx, "Statement")}
                </a>
            </li>
        }else {
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle active" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                    {Tr(ctx, "Statement")}
                </a>
                <div class="dropdown-menu" hx-boost="true">
                    for _, st := range statements {
                        if st.Type() == problems.DataTypeHTML {
                            <a href={templ.SafeURL("?type=html&locale="+st.Locale())} class="dropdown-item">
                                @localeEmoji(st.Locale()) HTML {st.Locale()}
                            </a>
                        }else if st.Type() == problems.DataTypePDF {
                            <a href={templ.SafeURL("?type=pdf&locale="+st.Locale())} class="dropdown-item">
                                @localeEmoji(st.Locale()) PDF {st.Locale()}
                            </a>
                         }
                    }
                </div>
            </li>
        }
        <li class="nav-item">
            <a class={"nav-link"+iif(curr=="submit", " active", "")} href="./submit">{Tr(ctx, "Submit")}</a>
        </li>
        <li class="nav-item dropdown">
            <a class={"nav-link dropdown-toggle"+iif(curr=="status", " active", "")} data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">{Tr(ctx, "Submissions")}</a>
            <div class="dropdown-menu">
                <a class="dropdown-item" href="./status">{Tr(ctx, "all")}</a>
                <a class="dropdown-item" href="./status?ac=1">{Tr(ctx, "accepted")}</a>
            </div>
        </li>
        <li class="nav-item">
            <a class={"nav-link"+iif(curr=="ranklist", " active", "")} href="./ranklist">{Tr(ctx, "Ranklist")}</a>
        </li>
    </ul>
    <br>
}

type LanguageCompileCommand struct {
    Name string
    Command string
}

type ProblemViewModel struct {
    Title string
    Problemset string
    Name string
    DisplayLimits bool
    TimeLimit int
    InputFile string
    OutputFile string
    MemoryLimit memory.Amount
    ShowTags bool
    Tags []njudge.Tag
    Author string
    TaskTypeName string

    CanEdit bool
    CanAddTags bool

    LanguageCompileCommands []LanguageCompileCommand
    Languages []language.Language
    UserInfo *njudge.ProblemUserInfo

    Attachments problems.Attachments
    Statements problems.Contents
    Statement *problems.LocalizedData

    TagsToAdd []njudge.Tag
}

templ tagListProblem(tags []njudge.Tag, add bool) {
    for _, tag := range tags {
        <span class="badge badge-secondary">
            {tag.Name}
            if add {
                <a href={templ.SafeURL("delete_tag/"+d(tag.ID))} style="color:#fff;">&times;</a>
            }
        </span>
        &#32;
    }
    if add {
        <span class="badge badge-secondary">
            <a href="#" class="text-reset text-decoration-none" data-toggle="modal" data-target="#tagModal">+</a>
        </span>
    }
}

templ problemCompilationCommandsModal(cmds []LanguageCompileCommand) {
    <div class="modal fade" id="compileModal" tabindex="-1" aria-labelledby="compileModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="tagModalLabel">Ford√≠t√°si parancsok</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            for _, lcc := range cmds {
               {lcc.Name}: <pre><code>{lcc.Command}</code></pre>
            }
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">{Tr(ctx, "Close")}</button>
          </div>
        </div>
      </div>
    </div>
}

templ problemInfoCard(vm ProblemViewModel) {
    <div class="card">
        <div class="card-header">
            <i class="bi bi-info-circle"></i>
            {Tr(ctx, "Information")}
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">{Tr(ctx, "Identifier")}:</div>
                <div class="col-6">{vm.Name}</div>
                <div class="col-6">{Tr(ctx, "Title")}:</div>
                <div class="col-6">{vm.Title}</div>
                if vm.DisplayLimits {
                    <div class="col-6">{Tr(ctx, "Time limit")}:</div>
                    <div class="col-6">{d(vm.TimeLimit)} ms</div>
                    <div class="col-6">{Tr(ctx, "Memory limit")}:</div>
                    <div class="col-6">{memMiB(vm.MemoryLimit)} MiB</div>
                }
                if vm.InputFile != "" ||  vm.OutputFile != ""  {
                    <div class="col-6">{Tr(ctx, "IO files")}:</div>
                    <div class="col-6">
                        if vm.InputFile != "" {
                            <b>{vm.InputFile}</b>
                        }else {
                            stdin
                        }
                        /
                        if vm.OutputFile != "" {
                            <b>{vm.OutputFile}</b>
                        }else {
                            stdout
                        }
                    </div>
                }
                <div class="col-6">{Tr(ctx, "Tags")}:</div>
                <div class="col-6">
                    if !vm.ShowTags {
                        <details>
                        <summary>{Tr(ctx, "show")}</summary>
                            @tagListProblem(vm.Tags, vm.CanAddTags)
                        </details>
                    }else {
                        @tagListProblem(vm.Tags, vm.CanAddTags)
                    }
                </div>
                <div class="col-6">{Tr(ctx, "Task type")}:</div>
                <div class="col-6">{vm.TaskTypeName}</div>
                if vm.Author != "" {
                    <div class="col-6">{Tr(ctx, "Author")}:</div>
                    <div class="col-6">{vm.Author}</div>
                }
                <div class="col-12">
                <a href="#" data-toggle="modal" data-target="#compileModal">Ford√≠t√°si parancsok</a>
                </div>
                @problemCompilationCommandsModal(vm.LanguageCompileCommands)
            </div>
        </div>
    </div>
}

templ toSubmitLoginOrRegister() {
    Bek√ºld√©shez <a href={"/user/login?next="+ctx.Value(URLPathContextKey).(templ.SafeURL)}>l√©pj be</a>
    vagy <a href="/user/register">regisztr√°lj</a>!
}

templ languageSelect(lastLanguage string, languages []language.Language) {
    <select name="language" class="custom-select form-control" id="languagesList">
        for _, l := range languages {
            <option value={l.ID()} selected?={lastLanguage == l.ID()}>{l.DisplayName()}</option>
        }
    </select>
}

templ problemSubmitCard(vm ProblemViewModel) {
    <div class="card">
        <div class="card-header">
            <i class="bi bi-send"></i> {Tr(ctx, "Submit solution")}
        </div>
        <div class="card-body">
            if u := userContext(ctx); u != nil {
                <form action={templ.SafeURL("/problemset/"+vm.Problemset+"/submit")} method="post" enctype="multipart/form-data">
                <input type="hidden" name="problem" value={vm.Name}>
                <input type="file" name="source" id="fileInput">
                <br>
                @languageSelect(vm.UserInfo.LastLanguage, vm.Languages)
                <br><br>
                @CSRFHidden()

                <input type="submit" class="btn btn-primary" value={Tr(ctx, "Submit")}>
                </form>
            }else {
                @toSubmitLoginOrRegister()
            }
        </div>
    </div>
}

templ problemLastSubmissions(vm ProblemViewModel) {
    if vm.UserInfo != nil && len(vm.UserInfo.Submissions)>0 {
        <div class="card table-responsive">
            <div class="card-header" style="border-bottom: 0px;">
                <i class="bi bi-clock-history"></i> {Tr(ctx, "Last submissions")}
            </div>
            <table class="card-body table" style="margin: 0px;">
                for _, s := range vm.UserInfo.Submissions {
                    <tr>
                        <td><a href={templ.SafeURL("/submission/"+d(s.ID))}>{d(s.ID)}</a></td>
                        <td>{s.Submitted.Local().Format(time.DateTime)}</td>
                        <td>
                            @SubmissionStatusText(s)
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
}

templ problemStatement(vm ProblemViewModel) {
    if vm.Statement != nil {
        if (*vm.Statement).Type() == problems.DataTypeHTML {
            @templ.Raw((*vm.Statement).String())
        }else if (*vm.Statement).Type() == problems.DataTypePDF {
            <embed src={"pdf/"+(*vm.Statement).Locale()+"/"} width="100%" height="800px"/>
        }
    }
}

templ problemAddTag(vm ProblemViewModel) {
    <div class="modal fade" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="tagModalLabel">{Tr(ctx, "Add a tag to problem %q", vm.Title)}</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form action="tags" method="post" id="addTag">
            <select class="form-control" name="tagID">
                for _, tag := range vm.TagsToAdd {
                    <option value={d(tag.ID)}>{tag.Name}</option>
                }
            </select>
            @CSRFHidden()
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">{Tr(ctx, "Cancel")}</button>
            <button type="submit" class="btn btn-primary" form="addTag">{Tr(ctx, "Add")}</button>
          </div>
        </div>
      </div>
    </div>
}

templ problemAttachments(vm ProblemViewModel) {
    <div class="card">
        <div class="card-header">
            <i class="bi bi-paperclip"></i> {Tr(ctx, "Attachments")}
        </div>
        <div class="card-body">
            for _, a := range vm.Attachments {
                <a href={templ.SafeURL("attachment/"+a.Name()+"/")}>
                    <i class="bi bi-file-earmark-text-fill"></i>
                    {Tr(ctx, "File")} ({a.Name()})
                </a>
                <br>
            }
            if pdfs := vm.Statements.FilterByType(problems.DataTypePDF); len(pdfs)>0 {
                for _, s := range pdfs {
                    <a href={templ.SafeURL("pdf/"+s.Locale()+"/")}>
                        <i class="bi bi-file-earmark-pdf-fill"></i>
                        {Tr(ctx, "Statement")} ({s.Locale()})
                    </a>
                    <br>
                }
            }

        </div>
    </div>
}

templ problemPage(name string, vm *ProblemViewModel) {
    @Page() {
        if vm==nil {
            @problemMenu(name, nil)
        }else {
            @problemMenu(name, vm.Statements)
        }
        { children... }
    }
}

templ problemEditCard(vm ProblemViewModel) {
    <div class="card">
        <div class="card-header">
            <i class="bi bi-gear"></i>
            <a href="./edit">{Tr(ctx, "Edit")}</a>
        </div>
    </div>
}

templ Problem(vm ProblemViewModel) {
    @problemPage("problem", &vm) {
        @problemAddTag(vm)
        <div class="row">
            <div class="col-12 col-lg-9">
                @problemStatement(vm)
            </div>
            <div class="col-12 col-lg-3">
                if vm.CanEdit {
                    @problemEditCard(vm)
                    <br>
                }
                @problemInfoCard(vm)
                <br>
                @problemSubmitCard(vm)
                <br>
                @problemLastSubmissions(vm)
                <br>
                @problemAttachments(vm)
            </div>
        </div>
    }
}

type ProblemRanklistRow struct {
    SubmissionID int
    Name string
    Text string
    Solved bool

    SortKey int64 //sort by (SortKey, SubmissionID)
}

type ProblemRanklistViewModel struct {
    ScoredProblem bool
    TimeRows []ProblemRanklistRow
    MemRows []ProblemRanklistRow
    SizeRows []ProblemRanklistRow
    ScoresRows []ProblemRanklistRow
}

templ ProblemRanklist(vm ProblemRanklistViewModel) {
   @problemPage("ranklist", nil) {
   <div class="container p-0">
      <div class="row m-0">
      if len(vm.TimeRows)>0 {
         <div class="col-md-4">
            <h3><i class="bi bi-clock"></i> {Tr(ctx, "Fastest")}</h3>
            <table class="table table-sm table-bordered">
               <thead>
                  <tr>
                     <th scope="col"></th>
                     <th scope="col">{Tr(ctx, "Name")}</th>
                     <th scope="col">{Tr(ctx, "Result")}</th>
                  </tr>
               </thead>
               for ind, row := range vm.TimeRows {
               <tr>
                  <td>{d(ind+1)}.</td>
                  <td><a href={templ.SafeURL("/user/profile/"+row.Name+"/")}>{row.Name}</a></td>
                  <td>
                     <a href={templ.SafeURL("/submission/"+d(row.SubmissionID))}>{row.Text}</a>
                  </td>
               </tr>
               }
            </table>
         </div>
      }
      if len(vm.MemRows)>0 {
         <div class="col-md-4">
            <h3><i class="bi bi-memory"></i> {Tr(ctx, "Least memory")}</h3>
            <table class="table table-sm table-bordered">
                <thead>
                  <tr>
                     <th scope="col"></th>
                     <th scope="col">{Tr(ctx, "Name")}</th>
                     <th scope="col">{Tr(ctx, "Result")}</th>
                  </tr>
               </thead>
               for ind, row := range vm.MemRows {
               <tr>
                  <td>{d(ind+1)}.</td>
                  <td><a href={templ.SafeURL("/user/profile/"+row.Name+"/")}>{row.Name}</a></td>
                  <td>
                     <a href={templ.SafeURL("/submission/"+d(row.SubmissionID))}>{row.Text}</a>
                  </td>
               </tr>
               }
            </table>
         </div>
      }
      if len(vm.SizeRows)>0 {
         <div class="col-md-4">
            <h3><i class="bi bi-journal-code"></i> {Tr(ctx, "Smallest")}</h3>
            <table class="table table-sm table-bordered">
                <thead>
                  <tr>
                     <th scope="col"></th>
                     <th scope="col">{Tr(ctx, "Name")}</th>
                     <th scope="col">{Tr(ctx, "Result")}</th>
                  </tr>
               </thead>
               for ind, row := range vm.SizeRows {
               <tr>
                  <td>{d(ind+1)}.</td>
                  <td><a href={templ.SafeURL("/user/profile/"+row.Name+"/")}>{row.Name}</a></td>
                  <td>
                     <a href={templ.SafeURL("/submission/"+d(row.SubmissionID))}>{row.Text}</a>
                  </td>
               </tr>
               }
            </table>
         </div>
      }
         <div class="col-12">
            <h3><i class="bi bi-list"></i> {Tr(ctx, "Results")}</h3>
            <table class="table table-sm table-bordered">
               <thead>
                  <tr>
                     <th scope="col">{Tr(ctx, "Name")}</th>
                     <th scope="col">{Tr(ctx, "Result")}</th>
                  </tr>
               </thead>
               for _, row := range vm.ScoresRows {
               <tr>
                  <td><a href={templ.SafeURL("/user/profile/"+row.Name+"/")}>{row.Name}</a></td>
                  <td>
                     <a href={templ.SafeURL("/submission/"+d(row.SubmissionID))}>
                     if vm.ScoredProblem {
                        {row.Text}
                     }else {
                        if row.Solved {
                            <i class="bi bi-check-lg text-success"></i>
                        }else {
                            <i class="bi bi-x-lg text-danger"></i>
                        }
                     }
                     </a>
                  </td>
               </tr>
               }
            </table>
         </div>
      </div>
   </div>
   }
}

templ ProblemStatus(vm SubmissionsViewModel) {
    @problemPage("status", nil) {
        @Submissions(vm)
    }
}

type ProblemSubmitViewModel struct {
    Problemset string
    Name string
    Title string
    UserInfo *njudge.ProblemUserInfo
    Languages []language.Language
}

templ ProblemSubmit(vm ProblemSubmitViewModel) {
    @problemPage("submit", nil) {
        if vm.UserInfo != nil {
            <form action={templ.SafeURL("/problemset/"+vm.Problemset+"/submit")} method="post" >
            <div class="form-group">
                <label for="problem" class="font-weight-bold">{Tr(ctx, "Problem")}</label>
                <input type="hidden" name="problem" value={vm.Name}>
                <div id="problem">{vm.Title}</div>
            </div>
            <div class="form-group">
                <label for="submissionCode" class="font-weight-bolder">{Tr(ctx, "Code")}</label>
                <textarea class="form-control" id="submissionCode" rows="30" name="submissionCode"></textarea>
                <div id="editor"></div>
            </div>
            <div class="form-group">
                <label for="languagesList" class="font-weight-bolder">{Tr(ctx, "Language")}</label>
                @languageSelect(vm.UserInfo.LastLanguage, vm.Languages)
            </div>
            @CSRFHidden()
            <button type="submit" class="btn btn-primary">{Tr(ctx, "Submit")}</button>
            </form>
            <style>
                textarea[name="submissionCode"] {
                    display: none;
                }
                #editor {
                    width: 100%;
                    height: 500px;
                }
            </style>

            <script src="https://cdn.jsdelivr.net/npm/ace-builds@1.22.0/src-min-noconflict/ace.min.js "></script>
            <link href="https://cdn.jsdelivr.net/npm/ace-builds@1.22.0/css/ace.min.css " rel="stylesheet">
            <script>
                const editor = ace.edit("editor", {
                    "mode": "ace/mode/c_cpp"
                });
                const textarea = document.querySelector('textarea[name="submissionCode"]');

                editor.getSession().setValue(textarea.value);
                editor.getSession().on('change', function(){
                    textarea.value = editor.getSession().getValue();
                });

                const languagesList = document.querySelector('#languagesList');
                const convertLang = {
                    "cpp11": "c_cpp",
                    "cpp14": "c_cpp",
                    "cpp17": "c_cpp",
                    "csharp": "csharp",
                    "golang": "golang",
                    "java": "java",
                    "julia": "julia",
                    "nim": "nim",
                    "pascal": "pascal",
                    "pypy3": "python",
                    "python3": "python"
                };

                const updateLanguage = function() {
                    let langCode = "text";
                    if(languagesList.value in convertLang)
                        langCode = convertLang[languagesList.value];

                    editor.getSession().setMode({
                        path: "ace/mode/"+langCode
                    });
                }
                window.onload = updateLanguage;
                languagesList.onchange = updateLanguage;
            </script>
        }else {
            @toSubmitLoginOrRegister()
        }
    }
}

type ProblemTag struct {
    Name string
    User string
    Added time.Time
}

type ProblemEditViewModel struct {
    Categories []CategoryFilterOption
    Visible bool
    Author string
    Tags []ProblemTag
}

templ ProblemEdit(vm ProblemEditViewModel) {
    @problemPage("edit", nil) {
        <form method="post" action="./edit">
            <div class="form-group">
                <label for="categoryFilter">
                    {Tr(ctx, "Category")}:
                </label>
                <select name="category" class="custom-select" id="categoryFilter" class="form-control">
                    for _, category := range vm.Categories {
                        <option value={category.Value} selected?={ category.Selected }>{category.Name}</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="author">
                    {Tr(ctx, "Author")}:
                </label>
                <input type="text" name="author" id="author" class="form-control" value={vm.Author}>
            </div>
            <div class="form-group form-check">
                <input type="checkbox" checked?={vm.Visible} name="visible" id="visible" class="form-check-input">
                <label for="visible">
                    {Tr(ctx, "Visible")}
                </label>
            </div>
            @CSRFHidden()
            <button type="submit" class="btn btn-outline-warning">
                {Tr(ctx, "Edit")}
            </button>
        </form>
        <br>
        {Tr(ctx, "Tags")}:
        <ul>
        for _, tag := range vm.Tags {
            <li>
                <span class="badge badge-secondary">{tag.Name}</span> by
                <a href={templ.SafeURL("/user/profile/"+tag.User+"/")}>{tag.User}</a>
                at {tag.Added.Format(time.DateTime)}
            </li>
        }
        </ul>

         <script type="text/javascript">
                $(function () {
                   $('#categoryFilter').select2({
                       theme: 'bootstrap4',
                   });
                });
         </script>
    }
}