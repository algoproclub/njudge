// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Admin() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><title>njudge admin</title><link rel=\"stylesheet\" href=\"/static/css/ng-admin.min.css\"></head><body ng-app=\"njudge\"><div ui-view=\"ng-admin\"></div><script src=\"/static/js/ng-admin.min.js\"></script><script type=\"text/javascript\">\n        const njudge = angular.module('njudge', ['ng-admin']);\n        njudge.config(['NgAdminConfigurationProvider', function(NgAdminConfigurationProvider) {\n            const nga = NgAdminConfigurationProvider;\n            const admin = nga.application('njudge admin').baseApiUrl(\"/api/v1/\");\n\n            const problem_rel = nga.entity('problem_rels').identifier(nga.field('id'));\n            problem_rel.listView().fields([\n                nga.field('id'),\n                nga.field('problemset'),\n                nga.field('problem')\n            ]).listActions(['edit']);\n\n            problem_rel.creationView().fields([\n                nga.field('problemset').validation({ required: true }),\n                nga.field('problem').validation({ required: true })\n            ]);\n\n            problem_rel.editionView().fields(problem_rel.creationView().fields());\n\n            const partial = nga.entity('partials').identifier(nga.field('name'));\n            partial.listView().fields([\n                nga.field('name'),\n                nga.field('html', 'wysiwyg'),\n            ]).listActions(['show', 'edit']).sortField('name');\n\n            partial.creationView().fields([\n                nga.field('name').validation({ required: true }),\n                nga.field('html', 'wysiwyg').validation({ required: true })\n            ]);\n\n            partial.editionView().fields([\n                nga.field('html', 'wysiwyg').validation({ required: true })\n            ]);\n\n            partial.showView().fields(partial.listView().fields());\n\n\n            const judge = nga.entity(\"judges\").identifier(nga.field('id'));\n            judge.listView().fields([\n                nga.field('id'),\n                nga.field('url'),\n                nga.field('online'),\n            ]).listActions(['edit','show']);\n\n            judge.creationView().fields([\n                nga.field('url').validation({ required: true })\n            ]);\n\n            judge.editionView().fields(judge.creationView().fields());\n\n\n            judge.showView().fields([\n                nga.field('id'),\n                nga.field('url'),\n                nga.field('online'),\n                nga.field('problem_list', 'json'),\n                nga.field('language_list', 'json'),\n            ]).actions(['list', 'delete', 'edit']);\n\n            const user = nga.entity(\"users\").identifier(nga.field('id'));\n            user.listView().fields([\n                nga.field('id'),\n                nga.field('name'),\n                nga.field('email'),\n                nga.field('role'),\n            ]).listActions(['edit','show']);\n\n            user.creationView().fields([\n                nga.field('name').validation({ required: true }),\n                nga.field('password').validation({ required: true }),\n                nga.field('email').validation({ required: true }),\n                nga.field('role').validation({requiered: true}),\n            ]);\n\n            user.editionView().fields(user.creationView().fields());\n\n            user.showView().fields([\n                nga.field('id'),\n                nga.field('name'),\n                nga.field('email'),\n                nga.field('activation_key'),\n                nga.field('role'),\n            ]).actions(['list', 'delete', 'edit']);\n\n\n            const submission = nga.entity(\"submissions\").identifier(nga.field('id'));\n            submission.listView().fields([\n                nga.field('id'),\n                nga.field('user_id', 'reference').targetEntity(user).label('Felhaszn치l칩').targetField(nga.field('name')),\n                nga.field('problem_id', 'reference').targetEntity(problem_rel).label('Feladat').targetField(nga.field('problem')),\n                nga.field('language'),\n                nga.field('score'),\n                nga.field('verdict'),\n            ]).listActions(['show']);\n\n            submission.showView().fields([\n                nga.field('id'),\n                nga.field('user_id', 'reference').targetEntity(user).label('Felhaszn치l칩').targetField(nga.field('name')),\n                nga.field('problem_id', 'reference').targetEntity(problem_rel).label('Feladat').targetField(nga.field('problem')),\n                nga.field('language'),\n                nga.field('ontest'),\n                nga.field('verdict'),\n                nga.field('status'),\n            ]).actions(['list']);\n\n            admin.addEntity(problem_rel);\n            admin.addEntity(partial);\n            admin.addEntity(judge);\n            admin.addEntity(user);\n            admin.addEntity(submission);\n\n            admin.menu(nga.menu()\n                    .addChild(nga.menu(problem_rel).title('Problem relations').icon('<span class=\"glyphicon glyphicon-link\"></span>'))\n                    .addChild(nga.menu(judge).title('Judges').icon('<span class=\"glyphicon glyphicon-wrench\"></span>'))\n                    .addChild(nga.menu(user).title('Users').icon('<span class=\"glyphicon glyphicon-user\"></span>'))\n                    .addChild(nga.menu(submission).title('Submissions').icon('<span class=\"glyphicon glyphicon-upload\"></span>'))\n                    .addChild(nga.menu(partial).title('Partials').icon('<span class=\"glyphicon glyphicon-folder-open\"></span>'))\n            );\n\n            nga.configure(admin);\n        }]);\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
