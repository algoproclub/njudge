// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProblemTag is an object representing the database table.
type ProblemTag struct {
	ProblemID int       `boil:"problem_id" json:"problem_id" toml:"problem_id" yaml:"problem_id"`
	TagID     int       `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Added     time.Time `boil:"added" json:"added" toml:"added" yaml:"added"`

	R *problemTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L problemTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProblemTagColumns = struct {
	ProblemID string
	TagID     string
	UserID    string
	Added     string
}{
	ProblemID: "problem_id",
	TagID:     "tag_id",
	UserID:    "user_id",
	Added:     "added",
}

var ProblemTagTableColumns = struct {
	ProblemID string
	TagID     string
	UserID    string
	Added     string
}{
	ProblemID: "problem_tags.problem_id",
	TagID:     "problem_tags.tag_id",
	UserID:    "problem_tags.user_id",
	Added:     "problem_tags.added",
}

// Generated where

var ProblemTagWhere = struct {
	ProblemID whereHelperint
	TagID     whereHelperint
	UserID    whereHelperint
	Added     whereHelpertime_Time
}{
	ProblemID: whereHelperint{field: "\"problem_tags\".\"problem_id\""},
	TagID:     whereHelperint{field: "\"problem_tags\".\"tag_id\""},
	UserID:    whereHelperint{field: "\"problem_tags\".\"user_id\""},
	Added:     whereHelpertime_Time{field: "\"problem_tags\".\"added\""},
}

// ProblemTagRels is where relationship names are stored.
var ProblemTagRels = struct {
	Problem string
	Tag     string
	User    string
}{
	Problem: "Problem",
	Tag:     "Tag",
	User:    "User",
}

// problemTagR is where relationships are stored.
type problemTagR struct {
	Problem *ProblemRel `boil:"Problem" json:"Problem" toml:"Problem" yaml:"Problem"`
	Tag     *Tag        `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
	User    *User       `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*problemTagR) NewStruct() *problemTagR {
	return &problemTagR{}
}

func (r *problemTagR) GetProblem() *ProblemRel {
	if r == nil {
		return nil
	}
	return r.Problem
}

func (r *problemTagR) GetTag() *Tag {
	if r == nil {
		return nil
	}
	return r.Tag
}

func (r *problemTagR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// problemTagL is where Load methods for each relationship are stored.
type problemTagL struct{}

var (
	problemTagAllColumns            = []string{"problem_id", "tag_id", "user_id", "added"}
	problemTagColumnsWithoutDefault = []string{"problem_id", "tag_id", "user_id", "added"}
	problemTagColumnsWithDefault    = []string{}
	problemTagPrimaryKeyColumns     = []string{"problem_id", "tag_id"}
	problemTagGeneratedColumns      = []string{}
)

type (
	// ProblemTagSlice is an alias for a slice of pointers to ProblemTag.
	// This should almost always be used instead of []ProblemTag.
	ProblemTagSlice []*ProblemTag
	// ProblemTagHook is the signature for custom ProblemTag hook methods
	ProblemTagHook func(context.Context, boil.ContextExecutor, *ProblemTag) error

	problemTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	problemTagType                 = reflect.TypeOf(&ProblemTag{})
	problemTagMapping              = queries.MakeStructMapping(problemTagType)
	problemTagPrimaryKeyMapping, _ = queries.BindMapping(problemTagType, problemTagMapping, problemTagPrimaryKeyColumns)
	problemTagInsertCacheMut       sync.RWMutex
	problemTagInsertCache          = make(map[string]insertCache)
	problemTagUpdateCacheMut       sync.RWMutex
	problemTagUpdateCache          = make(map[string]updateCache)
	problemTagUpsertCacheMut       sync.RWMutex
	problemTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var problemTagAfterSelectMu sync.Mutex
var problemTagAfterSelectHooks []ProblemTagHook

var problemTagBeforeInsertMu sync.Mutex
var problemTagBeforeInsertHooks []ProblemTagHook
var problemTagAfterInsertMu sync.Mutex
var problemTagAfterInsertHooks []ProblemTagHook

var problemTagBeforeUpdateMu sync.Mutex
var problemTagBeforeUpdateHooks []ProblemTagHook
var problemTagAfterUpdateMu sync.Mutex
var problemTagAfterUpdateHooks []ProblemTagHook

var problemTagBeforeDeleteMu sync.Mutex
var problemTagBeforeDeleteHooks []ProblemTagHook
var problemTagAfterDeleteMu sync.Mutex
var problemTagAfterDeleteHooks []ProblemTagHook

var problemTagBeforeUpsertMu sync.Mutex
var problemTagBeforeUpsertHooks []ProblemTagHook
var problemTagAfterUpsertMu sync.Mutex
var problemTagAfterUpsertHooks []ProblemTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProblemTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProblemTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProblemTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProblemTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProblemTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProblemTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProblemTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProblemTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProblemTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range problemTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProblemTagHook registers your hook function for all future operations.
func AddProblemTagHook(hookPoint boil.HookPoint, problemTagHook ProblemTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		problemTagAfterSelectMu.Lock()
		problemTagAfterSelectHooks = append(problemTagAfterSelectHooks, problemTagHook)
		problemTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		problemTagBeforeInsertMu.Lock()
		problemTagBeforeInsertHooks = append(problemTagBeforeInsertHooks, problemTagHook)
		problemTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		problemTagAfterInsertMu.Lock()
		problemTagAfterInsertHooks = append(problemTagAfterInsertHooks, problemTagHook)
		problemTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		problemTagBeforeUpdateMu.Lock()
		problemTagBeforeUpdateHooks = append(problemTagBeforeUpdateHooks, problemTagHook)
		problemTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		problemTagAfterUpdateMu.Lock()
		problemTagAfterUpdateHooks = append(problemTagAfterUpdateHooks, problemTagHook)
		problemTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		problemTagBeforeDeleteMu.Lock()
		problemTagBeforeDeleteHooks = append(problemTagBeforeDeleteHooks, problemTagHook)
		problemTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		problemTagAfterDeleteMu.Lock()
		problemTagAfterDeleteHooks = append(problemTagAfterDeleteHooks, problemTagHook)
		problemTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		problemTagBeforeUpsertMu.Lock()
		problemTagBeforeUpsertHooks = append(problemTagBeforeUpsertHooks, problemTagHook)
		problemTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		problemTagAfterUpsertMu.Lock()
		problemTagAfterUpsertHooks = append(problemTagAfterUpsertHooks, problemTagHook)
		problemTagAfterUpsertMu.Unlock()
	}
}

// OneG returns a single problemTag record from the query using the global executor.
func (q problemTagQuery) OneG(ctx context.Context) (*ProblemTag, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single problemTag record from the query.
func (q problemTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProblemTag, error) {
	o := &ProblemTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for problem_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProblemTag records from the query using the global executor.
func (q problemTagQuery) AllG(ctx context.Context) (ProblemTagSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProblemTag records from the query.
func (q problemTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProblemTagSlice, error) {
	var o []*ProblemTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProblemTag slice")
	}

	if len(problemTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProblemTag records in the query using the global executor
func (q problemTagQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProblemTag records in the query.
func (q problemTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count problem_tags rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q problemTagQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q problemTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if problem_tags exists")
	}

	return count > 0, nil
}

// Problem pointed to by the foreign key.
func (o *ProblemTag) Problem(mods ...qm.QueryMod) problemRelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProblemID),
	}

	queryMods = append(queryMods, mods...)

	return ProblemRels(queryMods...)
}

// Tag pointed to by the foreign key.
func (o *ProblemTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	return Tags(queryMods...)
}

// User pointed to by the foreign key.
func (o *ProblemTag) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadProblem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (problemTagL) LoadProblem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProblemTag interface{}, mods queries.Applicator) error {
	var slice []*ProblemTag
	var object *ProblemTag

	if singular {
		var ok bool
		object, ok = maybeProblemTag.(*ProblemTag)
		if !ok {
			object = new(ProblemTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemTag))
			}
		}
	} else {
		s, ok := maybeProblemTag.(*[]*ProblemTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &problemTagR{}
		}
		args[object.ProblemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemTagR{}
			}

			args[obj.ProblemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`problem_rels`),
		qm.WhereIn(`problem_rels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProblemRel")
	}

	var resultSlice []*ProblemRel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProblemRel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for problem_rels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for problem_rels")
	}

	if len(problemRelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Problem = foreign
		if foreign.R == nil {
			foreign.R = &problemRelR{}
		}
		foreign.R.ProblemProblemTags = append(foreign.R.ProblemProblemTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProblemID == foreign.ID {
				local.R.Problem = foreign
				if foreign.R == nil {
					foreign.R = &problemRelR{}
				}
				foreign.R.ProblemProblemTags = append(foreign.R.ProblemProblemTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (problemTagL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProblemTag interface{}, mods queries.Applicator) error {
	var slice []*ProblemTag
	var object *ProblemTag

	if singular {
		var ok bool
		object, ok = maybeProblemTag.(*ProblemTag)
		if !ok {
			object = new(ProblemTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemTag))
			}
		}
	} else {
		s, ok := maybeProblemTag.(*[]*ProblemTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &problemTagR{}
		}
		args[object.TagID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemTagR{}
			}

			args[obj.TagID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.ProblemTags = append(foreign.R.ProblemTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ProblemTags = append(foreign.R.ProblemTags, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (problemTagL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProblemTag interface{}, mods queries.Applicator) error {
	var slice []*ProblemTag
	var object *ProblemTag

	if singular {
		var ok bool
		object, ok = maybeProblemTag.(*ProblemTag)
		if !ok {
			object = new(ProblemTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProblemTag))
			}
		}
	} else {
		s, ok := maybeProblemTag.(*[]*ProblemTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProblemTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProblemTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &problemTagR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &problemTagR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ProblemTags = append(foreign.R.ProblemTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ProblemTags = append(foreign.R.ProblemTags, local)
				break
			}
		}
	}

	return nil
}

// SetProblemG of the problemTag to the related item.
// Sets o.R.Problem to related.
// Adds o to related.R.ProblemProblemTags.
// Uses the global database handle.
func (o *ProblemTag) SetProblemG(ctx context.Context, insert bool, related *ProblemRel) error {
	return o.SetProblem(ctx, boil.GetContextDB(), insert, related)
}

// SetProblem of the problemTag to the related item.
// Sets o.R.Problem to related.
// Adds o to related.R.ProblemProblemTags.
func (o *ProblemTag) SetProblem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProblemRel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"problem_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"problem_id"}),
		strmangle.WhereClause("\"", "\"", 2, problemTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProblemID, o.TagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProblemID = related.ID
	if o.R == nil {
		o.R = &problemTagR{
			Problem: related,
		}
	} else {
		o.R.Problem = related
	}

	if related.R == nil {
		related.R = &problemRelR{
			ProblemProblemTags: ProblemTagSlice{o},
		}
	} else {
		related.R.ProblemProblemTags = append(related.R.ProblemProblemTags, o)
	}

	return nil
}

// SetTagG of the problemTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ProblemTags.
// Uses the global database handle.
func (o *ProblemTag) SetTagG(ctx context.Context, insert bool, related *Tag) error {
	return o.SetTag(ctx, boil.GetContextDB(), insert, related)
}

// SetTag of the problemTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ProblemTags.
func (o *ProblemTag) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"problem_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag_id"}),
		strmangle.WhereClause("\"", "\"", 2, problemTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProblemID, o.TagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &problemTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			ProblemTags: ProblemTagSlice{o},
		}
	} else {
		related.R.ProblemTags = append(related.R.ProblemTags, o)
	}

	return nil
}

// SetUserG of the problemTag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ProblemTags.
// Uses the global database handle.
func (o *ProblemTag) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the problemTag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ProblemTags.
func (o *ProblemTag) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"problem_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, problemTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProblemID, o.TagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &problemTagR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ProblemTags: ProblemTagSlice{o},
		}
	} else {
		related.R.ProblemTags = append(related.R.ProblemTags, o)
	}

	return nil
}

// ProblemTags retrieves all the records using an executor.
func ProblemTags(mods ...qm.QueryMod) problemTagQuery {
	mods = append(mods, qm.From("\"problem_tags\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"problem_tags\".*"})
	}

	return problemTagQuery{q}
}

// FindProblemTagG retrieves a single record by ID.
func FindProblemTagG(ctx context.Context, problemID int, tagID int, selectCols ...string) (*ProblemTag, error) {
	return FindProblemTag(ctx, boil.GetContextDB(), problemID, tagID, selectCols...)
}

// FindProblemTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProblemTag(ctx context.Context, exec boil.ContextExecutor, problemID int, tagID int, selectCols ...string) (*ProblemTag, error) {
	problemTagObj := &ProblemTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"problem_tags\" where \"problem_id\"=$1 AND \"tag_id\"=$2", sel,
	)

	q := queries.Raw(query, problemID, tagID)

	err := q.Bind(ctx, exec, problemTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from problem_tags")
	}

	if err = problemTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return problemTagObj, err
	}

	return problemTagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProblemTag) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProblemTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no problem_tags provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(problemTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	problemTagInsertCacheMut.RLock()
	cache, cached := problemTagInsertCache[key]
	problemTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			problemTagAllColumns,
			problemTagColumnsWithDefault,
			problemTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(problemTagType, problemTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(problemTagType, problemTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"problem_tags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"problem_tags\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into problem_tags")
	}

	if !cached {
		problemTagInsertCacheMut.Lock()
		problemTagInsertCache[key] = cache
		problemTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProblemTag record using the global executor.
// See Update for more documentation.
func (o *ProblemTag) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProblemTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProblemTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	problemTagUpdateCacheMut.RLock()
	cache, cached := problemTagUpdateCache[key]
	problemTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			problemTagAllColumns,
			problemTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update problem_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"problem_tags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, problemTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(problemTagType, problemTagMapping, append(wl, problemTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update problem_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for problem_tags")
	}

	if !cached {
		problemTagUpdateCacheMut.Lock()
		problemTagUpdateCache[key] = cache
		problemTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q problemTagQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q problemTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for problem_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for problem_tags")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProblemTagSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProblemTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"problem_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, problemTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in problemTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all problemTag")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProblemTag) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProblemTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no problem_tags provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(problemTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	problemTagUpsertCacheMut.RLock()
	cache, cached := problemTagUpsertCache[key]
	problemTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			problemTagAllColumns,
			problemTagColumnsWithDefault,
			problemTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			problemTagAllColumns,
			problemTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert problem_tags, could not build update column list")
		}

		ret := strmangle.SetComplement(problemTagAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(problemTagPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert problem_tags, could not build conflict column list")
			}

			conflict = make([]string, len(problemTagPrimaryKeyColumns))
			copy(conflict, problemTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"problem_tags\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(problemTagType, problemTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(problemTagType, problemTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert problem_tags")
	}

	if !cached {
		problemTagUpsertCacheMut.Lock()
		problemTagUpsertCache[key] = cache
		problemTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProblemTag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProblemTag) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProblemTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProblemTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProblemTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), problemTagPrimaryKeyMapping)
	sql := "DELETE FROM \"problem_tags\" WHERE \"problem_id\"=$1 AND \"tag_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from problem_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for problem_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q problemTagQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q problemTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no problemTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from problem_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for problem_tags")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProblemTagSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProblemTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(problemTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"problem_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, problemTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from problemTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for problem_tags")
	}

	if len(problemTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProblemTag) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ProblemTag provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProblemTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProblemTag(ctx, exec, o.ProblemID, o.TagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProblemTagSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ProblemTagSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProblemTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProblemTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), problemTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"problem_tags\".* FROM \"problem_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, problemTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProblemTagSlice")
	}

	*o = slice

	return nil
}

// ProblemTagExistsG checks if the ProblemTag row exists.
func ProblemTagExistsG(ctx context.Context, problemID int, tagID int) (bool, error) {
	return ProblemTagExists(ctx, boil.GetContextDB(), problemID, tagID)
}

// ProblemTagExists checks if the ProblemTag row exists.
func ProblemTagExists(ctx context.Context, exec boil.ContextExecutor, problemID int, tagID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"problem_tags\" where \"problem_id\"=$1 AND \"tag_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, problemID, tagID)
	}
	row := exec.QueryRowContext(ctx, sql, problemID, tagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if problem_tags exists")
	}

	return exists, nil
}

// Exists checks if the ProblemTag row exists.
func (o *ProblemTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProblemTagExists(ctx, exec, o.ProblemID, o.TagID)
}
