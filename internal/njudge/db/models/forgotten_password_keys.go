// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ForgottenPasswordKey is an object representing the database table.
type ForgottenPasswordKey struct {
	ID     int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Key    string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Valid  time.Time `boil:"valid" json:"valid" toml:"valid" yaml:"valid"`

	R *forgottenPasswordKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L forgottenPasswordKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ForgottenPasswordKeyColumns = struct {
	ID     string
	UserID string
	Key    string
	Valid  string
}{
	ID:     "id",
	UserID: "user_id",
	Key:    "key",
	Valid:  "valid",
}

var ForgottenPasswordKeyTableColumns = struct {
	ID     string
	UserID string
	Key    string
	Valid  string
}{
	ID:     "forgotten_password_keys.id",
	UserID: "forgotten_password_keys.user_id",
	Key:    "forgotten_password_keys.key",
	Valid:  "forgotten_password_keys.valid",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ForgottenPasswordKeyWhere = struct {
	ID     whereHelperint
	UserID whereHelperint
	Key    whereHelperstring
	Valid  whereHelpertime_Time
}{
	ID:     whereHelperint{field: "\"forgotten_password_keys\".\"id\""},
	UserID: whereHelperint{field: "\"forgotten_password_keys\".\"user_id\""},
	Key:    whereHelperstring{field: "\"forgotten_password_keys\".\"key\""},
	Valid:  whereHelpertime_Time{field: "\"forgotten_password_keys\".\"valid\""},
}

// ForgottenPasswordKeyRels is where relationship names are stored.
var ForgottenPasswordKeyRels = struct {
	User string
}{
	User: "User",
}

// forgottenPasswordKeyR is where relationships are stored.
type forgottenPasswordKeyR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*forgottenPasswordKeyR) NewStruct() *forgottenPasswordKeyR {
	return &forgottenPasswordKeyR{}
}

func (r *forgottenPasswordKeyR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// forgottenPasswordKeyL is where Load methods for each relationship are stored.
type forgottenPasswordKeyL struct{}

var (
	forgottenPasswordKeyAllColumns            = []string{"id", "user_id", "key", "valid"}
	forgottenPasswordKeyColumnsWithoutDefault = []string{"user_id", "key", "valid"}
	forgottenPasswordKeyColumnsWithDefault    = []string{"id"}
	forgottenPasswordKeyPrimaryKeyColumns     = []string{"id"}
	forgottenPasswordKeyGeneratedColumns      = []string{}
)

type (
	// ForgottenPasswordKeySlice is an alias for a slice of pointers to ForgottenPasswordKey.
	// This should almost always be used instead of []ForgottenPasswordKey.
	ForgottenPasswordKeySlice []*ForgottenPasswordKey
	// ForgottenPasswordKeyHook is the signature for custom ForgottenPasswordKey hook methods
	ForgottenPasswordKeyHook func(context.Context, boil.ContextExecutor, *ForgottenPasswordKey) error

	forgottenPasswordKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	forgottenPasswordKeyType                 = reflect.TypeOf(&ForgottenPasswordKey{})
	forgottenPasswordKeyMapping              = queries.MakeStructMapping(forgottenPasswordKeyType)
	forgottenPasswordKeyPrimaryKeyMapping, _ = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, forgottenPasswordKeyPrimaryKeyColumns)
	forgottenPasswordKeyInsertCacheMut       sync.RWMutex
	forgottenPasswordKeyInsertCache          = make(map[string]insertCache)
	forgottenPasswordKeyUpdateCacheMut       sync.RWMutex
	forgottenPasswordKeyUpdateCache          = make(map[string]updateCache)
	forgottenPasswordKeyUpsertCacheMut       sync.RWMutex
	forgottenPasswordKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var forgottenPasswordKeyAfterSelectMu sync.Mutex
var forgottenPasswordKeyAfterSelectHooks []ForgottenPasswordKeyHook

var forgottenPasswordKeyBeforeInsertMu sync.Mutex
var forgottenPasswordKeyBeforeInsertHooks []ForgottenPasswordKeyHook
var forgottenPasswordKeyAfterInsertMu sync.Mutex
var forgottenPasswordKeyAfterInsertHooks []ForgottenPasswordKeyHook

var forgottenPasswordKeyBeforeUpdateMu sync.Mutex
var forgottenPasswordKeyBeforeUpdateHooks []ForgottenPasswordKeyHook
var forgottenPasswordKeyAfterUpdateMu sync.Mutex
var forgottenPasswordKeyAfterUpdateHooks []ForgottenPasswordKeyHook

var forgottenPasswordKeyBeforeDeleteMu sync.Mutex
var forgottenPasswordKeyBeforeDeleteHooks []ForgottenPasswordKeyHook
var forgottenPasswordKeyAfterDeleteMu sync.Mutex
var forgottenPasswordKeyAfterDeleteHooks []ForgottenPasswordKeyHook

var forgottenPasswordKeyBeforeUpsertMu sync.Mutex
var forgottenPasswordKeyBeforeUpsertHooks []ForgottenPasswordKeyHook
var forgottenPasswordKeyAfterUpsertMu sync.Mutex
var forgottenPasswordKeyAfterUpsertHooks []ForgottenPasswordKeyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ForgottenPasswordKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ForgottenPasswordKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ForgottenPasswordKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ForgottenPasswordKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ForgottenPasswordKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ForgottenPasswordKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ForgottenPasswordKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ForgottenPasswordKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ForgottenPasswordKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forgottenPasswordKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForgottenPasswordKeyHook registers your hook function for all future operations.
func AddForgottenPasswordKeyHook(hookPoint boil.HookPoint, forgottenPasswordKeyHook ForgottenPasswordKeyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		forgottenPasswordKeyAfterSelectMu.Lock()
		forgottenPasswordKeyAfterSelectHooks = append(forgottenPasswordKeyAfterSelectHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		forgottenPasswordKeyBeforeInsertMu.Lock()
		forgottenPasswordKeyBeforeInsertHooks = append(forgottenPasswordKeyBeforeInsertHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		forgottenPasswordKeyAfterInsertMu.Lock()
		forgottenPasswordKeyAfterInsertHooks = append(forgottenPasswordKeyAfterInsertHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		forgottenPasswordKeyBeforeUpdateMu.Lock()
		forgottenPasswordKeyBeforeUpdateHooks = append(forgottenPasswordKeyBeforeUpdateHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		forgottenPasswordKeyAfterUpdateMu.Lock()
		forgottenPasswordKeyAfterUpdateHooks = append(forgottenPasswordKeyAfterUpdateHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		forgottenPasswordKeyBeforeDeleteMu.Lock()
		forgottenPasswordKeyBeforeDeleteHooks = append(forgottenPasswordKeyBeforeDeleteHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		forgottenPasswordKeyAfterDeleteMu.Lock()
		forgottenPasswordKeyAfterDeleteHooks = append(forgottenPasswordKeyAfterDeleteHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		forgottenPasswordKeyBeforeUpsertMu.Lock()
		forgottenPasswordKeyBeforeUpsertHooks = append(forgottenPasswordKeyBeforeUpsertHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		forgottenPasswordKeyAfterUpsertMu.Lock()
		forgottenPasswordKeyAfterUpsertHooks = append(forgottenPasswordKeyAfterUpsertHooks, forgottenPasswordKeyHook)
		forgottenPasswordKeyAfterUpsertMu.Unlock()
	}
}

// OneG returns a single forgottenPasswordKey record from the query using the global executor.
func (q forgottenPasswordKeyQuery) OneG(ctx context.Context) (*ForgottenPasswordKey, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single forgottenPasswordKey record from the query.
func (q forgottenPasswordKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ForgottenPasswordKey, error) {
	o := &ForgottenPasswordKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for forgotten_password_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ForgottenPasswordKey records from the query using the global executor.
func (q forgottenPasswordKeyQuery) AllG(ctx context.Context) (ForgottenPasswordKeySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ForgottenPasswordKey records from the query.
func (q forgottenPasswordKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ForgottenPasswordKeySlice, error) {
	var o []*ForgottenPasswordKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ForgottenPasswordKey slice")
	}

	if len(forgottenPasswordKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ForgottenPasswordKey records in the query using the global executor
func (q forgottenPasswordKeyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ForgottenPasswordKey records in the query.
func (q forgottenPasswordKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count forgotten_password_keys rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q forgottenPasswordKeyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q forgottenPasswordKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if forgotten_password_keys exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *ForgottenPasswordKey) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forgottenPasswordKeyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForgottenPasswordKey interface{}, mods queries.Applicator) error {
	var slice []*ForgottenPasswordKey
	var object *ForgottenPasswordKey

	if singular {
		var ok bool
		object, ok = maybeForgottenPasswordKey.(*ForgottenPasswordKey)
		if !ok {
			object = new(ForgottenPasswordKey)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeForgottenPasswordKey)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeForgottenPasswordKey))
			}
		}
	} else {
		s, ok := maybeForgottenPasswordKey.(*[]*ForgottenPasswordKey)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeForgottenPasswordKey)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeForgottenPasswordKey))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &forgottenPasswordKeyR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forgottenPasswordKeyR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ForgottenPasswordKey = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ForgottenPasswordKey = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the forgottenPasswordKey to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ForgottenPasswordKey.
// Uses the global database handle.
func (o *ForgottenPasswordKey) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the forgottenPasswordKey to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ForgottenPasswordKey.
func (o *ForgottenPasswordKey) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"forgotten_password_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, forgottenPasswordKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &forgottenPasswordKeyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ForgottenPasswordKey: o,
		}
	} else {
		related.R.ForgottenPasswordKey = o
	}

	return nil
}

// ForgottenPasswordKeys retrieves all the records using an executor.
func ForgottenPasswordKeys(mods ...qm.QueryMod) forgottenPasswordKeyQuery {
	mods = append(mods, qm.From("\"forgotten_password_keys\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"forgotten_password_keys\".*"})
	}

	return forgottenPasswordKeyQuery{q}
}

// FindForgottenPasswordKeyG retrieves a single record by ID.
func FindForgottenPasswordKeyG(ctx context.Context, iD int, selectCols ...string) (*ForgottenPasswordKey, error) {
	return FindForgottenPasswordKey(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindForgottenPasswordKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForgottenPasswordKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ForgottenPasswordKey, error) {
	forgottenPasswordKeyObj := &ForgottenPasswordKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"forgotten_password_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, forgottenPasswordKeyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from forgotten_password_keys")
	}

	if err = forgottenPasswordKeyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return forgottenPasswordKeyObj, err
	}

	return forgottenPasswordKeyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ForgottenPasswordKey) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ForgottenPasswordKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no forgotten_password_keys provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forgottenPasswordKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	forgottenPasswordKeyInsertCacheMut.RLock()
	cache, cached := forgottenPasswordKeyInsertCache[key]
	forgottenPasswordKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			forgottenPasswordKeyAllColumns,
			forgottenPasswordKeyColumnsWithDefault,
			forgottenPasswordKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"forgotten_password_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"forgotten_password_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into forgotten_password_keys")
	}

	if !cached {
		forgottenPasswordKeyInsertCacheMut.Lock()
		forgottenPasswordKeyInsertCache[key] = cache
		forgottenPasswordKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ForgottenPasswordKey record using the global executor.
// See Update for more documentation.
func (o *ForgottenPasswordKey) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ForgottenPasswordKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ForgottenPasswordKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	forgottenPasswordKeyUpdateCacheMut.RLock()
	cache, cached := forgottenPasswordKeyUpdateCache[key]
	forgottenPasswordKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			forgottenPasswordKeyAllColumns,
			forgottenPasswordKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update forgotten_password_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"forgotten_password_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, forgottenPasswordKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, append(wl, forgottenPasswordKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update forgotten_password_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for forgotten_password_keys")
	}

	if !cached {
		forgottenPasswordKeyUpdateCacheMut.Lock()
		forgottenPasswordKeyUpdateCache[key] = cache
		forgottenPasswordKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q forgottenPasswordKeyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q forgottenPasswordKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for forgotten_password_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for forgotten_password_keys")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ForgottenPasswordKeySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ForgottenPasswordKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forgottenPasswordKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"forgotten_password_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, forgottenPasswordKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in forgottenPasswordKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all forgottenPasswordKey")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ForgottenPasswordKey) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ForgottenPasswordKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no forgotten_password_keys provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forgottenPasswordKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	forgottenPasswordKeyUpsertCacheMut.RLock()
	cache, cached := forgottenPasswordKeyUpsertCache[key]
	forgottenPasswordKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			forgottenPasswordKeyAllColumns,
			forgottenPasswordKeyColumnsWithDefault,
			forgottenPasswordKeyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			forgottenPasswordKeyAllColumns,
			forgottenPasswordKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert forgotten_password_keys, could not build update column list")
		}

		ret := strmangle.SetComplement(forgottenPasswordKeyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(forgottenPasswordKeyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert forgotten_password_keys, could not build conflict column list")
			}

			conflict = make([]string, len(forgottenPasswordKeyPrimaryKeyColumns))
			copy(conflict, forgottenPasswordKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"forgotten_password_keys\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(forgottenPasswordKeyType, forgottenPasswordKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert forgotten_password_keys")
	}

	if !cached {
		forgottenPasswordKeyUpsertCacheMut.Lock()
		forgottenPasswordKeyUpsertCache[key] = cache
		forgottenPasswordKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ForgottenPasswordKey record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ForgottenPasswordKey) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ForgottenPasswordKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ForgottenPasswordKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ForgottenPasswordKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), forgottenPasswordKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"forgotten_password_keys\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from forgotten_password_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for forgotten_password_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q forgottenPasswordKeyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q forgottenPasswordKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no forgottenPasswordKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forgotten_password_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forgotten_password_keys")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ForgottenPasswordKeySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ForgottenPasswordKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(forgottenPasswordKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forgottenPasswordKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"forgotten_password_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, forgottenPasswordKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forgottenPasswordKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forgotten_password_keys")
	}

	if len(forgottenPasswordKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ForgottenPasswordKey) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ForgottenPasswordKey provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ForgottenPasswordKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForgottenPasswordKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForgottenPasswordKeySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ForgottenPasswordKeySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForgottenPasswordKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ForgottenPasswordKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forgottenPasswordKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"forgotten_password_keys\".* FROM \"forgotten_password_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, forgottenPasswordKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ForgottenPasswordKeySlice")
	}

	*o = slice

	return nil
}

// ForgottenPasswordKeyExistsG checks if the ForgottenPasswordKey row exists.
func ForgottenPasswordKeyExistsG(ctx context.Context, iD int) (bool, error) {
	return ForgottenPasswordKeyExists(ctx, boil.GetContextDB(), iD)
}

// ForgottenPasswordKeyExists checks if the ForgottenPasswordKey row exists.
func ForgottenPasswordKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"forgotten_password_keys\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if forgotten_password_keys exists")
	}

	return exists, nil
}

// Exists checks if the ForgottenPasswordKey row exists.
func (o *ForgottenPasswordKey) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ForgottenPasswordKeyExists(ctx, exec, o.ID)
}
